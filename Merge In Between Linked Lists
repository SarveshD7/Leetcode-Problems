Problem Statement - 
You are given two linked lists: list1 and list2 of sizes n and m respectively.
Remove list1's nodes from the ath node to the bth node, and put list2 in their place.
Build the result list and return its head.

Example - 
Input: list1 = [10,1,13,6,9,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
Output: [10,1,13,1000000,1000001,1000002,5]
Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. 
The blue edges and nodes in the above figure indicate the result.

-----------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        ListNode* h = NULL, *t = NULL, *temp1 = list1, *temp2=list2;
        int i = 0;
        while(temp1 && i<b){
            if(i+1==a) h = temp1;
            i++;
            temp1 = temp1->next;
        }
        t = temp1->next;
        temp1->next = NULL;
        while(temp2 && temp2->next)
            temp2 = temp2->next;
        h->next = list2;
        temp2->next = t;
        return list1;
    }
};
