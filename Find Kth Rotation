Problem Statement - 
Given an increasing sorted rotated array arr of distinct integers. The array is right-rotated k times. Find the value of k.
Let's suppose we have an array arr = [2, 4, 6, 9], so if we rotate it by 2 times so that it will look like this:
After 1st Rotation : [9, 2, 4, 6]
After 2nd Rotation : [6, 9, 2, 4]

Example - 
Input: arr = [5, 1, 2, 3, 4]
Output: 1
Explanation: The given array is 5 1 2 3 4. The original sorted array is 1 2 3 4 5. We can see that the array was rotated 1 times to the right.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
  public:
    int findKRotation(vector<int> &nums) {
        // Code Here
        int l=0, r=nums.size()-1, mn=INT_MAX, ans=-1, m;
        while(l<=r){
            m=(r-l)/2+l;
            if(nums[m]<mn) mn=nums[m], ans=m;
            if(nums[m]>=nums[l] && nums[m]<=nums[r]){
                // SORTED NO ROTATION
                r=m-1;
            }else if(nums[m]<=nums[l] && nums[m]<=nums[r]){
                // RIGHT SORTED
                r=m-1;
            }else if(nums[m]>=nums[l] && nums[m]>=nums[r]){
                // LEFT SORTED 
                l=m+1;
            }
        }
        return ans;
    }
};
