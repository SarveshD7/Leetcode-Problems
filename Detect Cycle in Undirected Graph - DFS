Problem Statement - 
Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not.
Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.

Example - 
Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1
Explanation: 
1->2->3->4->1 is a cycle.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution -
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool solve(int i, vector<int>adj[], int v, vector<int>&vis){
        vis[i] = 1;
        int cnt = 0;
        for(auto j:adj[i])
            if(vis[j]==1) cnt++;
        if(cnt==adj[i].size() && cnt>1) return true;
        for(auto j:adj[i]){
            if(vis[j]==0)
                if(solve(j, adj, v, vis))return true;
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>vis(V,0);
        for(int i = 0;i<V;i++){
         if(vis[i]==0) 
         if(solve(i,adj, V, vis)) return true;
        }
        return false;
    }
};
