Problem Statement - 
Geek wants to climb from the 0th stair to the (n-1)th stair. At a time the Geek can climb either one or two steps. A height[N] array is also given. Whenever the geek jumps 
from stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]), where abs() means the absolute difference. return the minimum energy that can be 
used by the Geek to jump from stair 0 to stair N-1.

Example - 
Input: n = 4, height = {10 20 30 10]
Output: 20
Explanation:
Geek jump from 1st to 2nd stair(|20-10| = 10 energy lost). Then a jump from the 2nd to the last stair(|10-20| = 10 energy lost). So, total energy lost is 20 which is the minimum.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
  public:
    int solve(int i, int n, vector<int>&height, vector<int>&dp){
        if(i>=n-1){return 0;}
        if(dp[i]!=-1) return dp[i];
        int v1=INT_MAX, v2=INT_MAX;
        v1=abs(height[i]-height[i+1])+solve(i+1, n, height, dp);
        if(i+2<=n-1) v2=abs(height[i]-height[i+2])+solve(i+2, n, height, dp);
        return dp[i]=min(v1, v2);
    }
    int minimumEnergy(vector<int>& height, int n) {
        // Code here
        // MEMOIZATION
        // int i=0;
        vector<int>dp(n, -1);
        // int ans= solve(i, n, height,dp);
        // return ans;
        // Bottom Up  TABULATION
        if(n==1) return 0;
        if(n==2) return abs(height[0]-height[1]);
        dp[n-1]=0, dp[n-2]=abs(height[n-1]-height[n-2]);
        for(int i=n-3;i>=0;i--) dp[i] = min(abs(height[i]-height[i+1])+dp[i+1], abs(height[i]-height[i+2])+dp[i+2]);
        return dp[0];      
    }
};
