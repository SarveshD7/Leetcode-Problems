Problem Statement - 
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.
Note that:
The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.

Example - 
Input: word = "abacaba", k = 3
Output: 2
Explanation: At the 1st second, we remove characters "aba" from the prefix of word, and add characters "bac" to the end of word. Thus, word becomes equal to "cababac".
At the 2nd second, we remove characters "cab" from the prefix of word, and add "aba" to the end of word. Thus, word becomes equal to "abacaba" and reverts to its initial state.
It can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int isOperator(string op){
        if(op=="+") return 1;
        else if(op=="-") return 2;
        else if(op=="*") return 3;
        else if(op=="/") return 4;
        else return 0;
    }
    int evalRPN(vector<string>& tokens) {
        int ans = 0, n, v, a, b;
        stack<int>x;
        for(auto i:tokens){
            v = isOperator(i);
            if(v==0) x.push(stoi(i));
            else{
                a = x.top();
                x.pop();
                b = x.top();
                x.pop();
                if(v==1)
                    x.push(a+b);
                else if(v==2) x.push(b-a);
                else if(v==3) x.push(a*b);
                else x.push(b/a);
            }
        }
        return x.top();
    }
};
