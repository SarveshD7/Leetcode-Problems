Problem Statement - 
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example - 
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void solve(int i, string&nums, string s, vector<string>&ans, vector<string>&m){
        if(i>=nums.size()){
            if(!s.empty())ans.push_back(s);
            return ;
        }
        // PICK
        string st=s;
        for(auto j:m[nums[i]-'1']){
            s+=j;
            solve(i+1, nums, s, ans, m);
            s=st;
        }
        return ;
    }
    vector<string> letterCombinations(string digits) {
        vector<string>ans;
        string s;
        int i=0;
        vector<string>m = {"", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        solve(i, digits, s, ans, m);
        return ans;
    }
};
