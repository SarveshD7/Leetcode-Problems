Problem Statement - 
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example - 
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void solve(int i, string digits, vector<string>v, vector<string>&ans, string temp){
        if(i>=digits.size()){
            if(temp.size()>0)
                ans.push_back(temp);
            return ;
        }
        string t2;
        for(auto j: v[digits[i]-'0']){
            t2 = temp;
            temp+=j;
            solve(i+1, digits, v, ans, temp);
            temp = t2;
        }
        return ;
    }
    vector<string> letterCombinations(string digits) {
        vector<string>v(10, "");
        v[2] = "abc", v[3] = "def", v[4] = "ghi", v[5] = "jkl", v[6] = "mno", v[7] = "pqrs", v[8] = "tuv", v[9] = "wxyz";
        vector<string>ans;
        string temp;
        int i = 0;
        solve(i, digits, v, ans, temp);
        return ans;
    }
};
