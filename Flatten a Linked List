Problem statement - 
Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of the next pointer.
For more clarity have a look at the printList() function in the driver code.

Example - 

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
void InsertSorted(Node* &root,int k){
    Node* n = new Node(k);
    if(root->data>k){
        n->bottom = root;
        root=n;
        return;
    }
    else{
        
        Node * t=root;
        Node * end=NULL;
        while(t->bottom!=NULL)
        t=t->bottom;
        end=t;
        t=root;
        while(t!=NULL && t->bottom!=NULL && t->bottom->data<k){
            t=t->bottom;
        }
        if(t->bottom!=NULL){
            
            Node* temp=t->bottom;
            t->bottom=n;
            n->bottom=temp;
            return;
        }
        else{
            end->bottom= n;
            return; 
            
        }
       
    }
}
Node *flatten(Node *root)
{
       Node* t=root->next;
       Node* p=root;
       Node* de=NULL;
       while(t!=NULL){
           Node * a=t;
           while(a->bottom!=NULL){
               de= a->bottom;
               a->bottom= de->bottom;
                de->bottom=NULL;
               InsertSorted(root,de->data);
            //   a=a->bottom;
           }
           de=t;
           Node * temp=t->next;
           root->next=root->next->next;
            t->next=NULL;
           InsertSorted(root,de->data);
           t=temp;
           
       }
       return root;
       
}

