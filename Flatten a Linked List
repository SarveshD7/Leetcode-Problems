Problem statement - 
Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of the next pointer.
For more clarity have a look at the printList() function in the driver code.

Example - 

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 

class Solution {
  public:
    // Function which returns the  root of the flattened linked list.
    Node *flatten(Node *root) {
        Node* t=root->next, *n=NULL, *b=NULL, *p=NULL, *h=root, *n2=NULL, *t1=NULL, *tb=NULL;
        root->next=NULL;
        while(t){
            n=t->next;
            b=t;
            while(b){
                h=root, p=NULL;
                tb=b->bottom;
                while(h && h->data<b->data) p=h, h=h->bottom;
                if(h && h==root)  n2=h->bottom, b->bottom=h, root=b;
                else n2=p->bottom, p->bottom=b, b->bottom=n2;
                
                // cout<<p->data<<" "<<b->data<<endl;
                b=tb;
            }
            t->next=NULL, t->bottom;
            t=n;
        }
        return root;
    }
};
