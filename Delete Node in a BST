Problem Statement - 
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.
Basically, the deletion can be divided into two stages:
Search for a node to remove.
If the node is found, delete the node.

Example - 
Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* findMin(TreeNode* node){
        if(!node) return node;
        TreeNode* temp = node;
        while(temp->left) temp = temp->left;
        cout<<node->val<<" "<<temp->val<<endl;
        return temp;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;
        if(root->val==key){
            if(root->left && root->right){
                // Both children present
                TreeNode* left = root->left;
                TreeNode* right = root->right;
                TreeNode* node = findMin(root->right);
                node->left = left;
                root->left = NULL;
                root->right = NULL;
                cout<<right->val<<endl;
                return right;
            }else if(!root->left && root->right){
                // Only right child present
                return root->right;
            }else if(root->left && !root->right){
                // Only left child present
                return root->left;
            }else{
                // Left node
                return NULL;
            }
        }else if(root->val<key) root->right = deleteNode(root->right, key);
        else root->left = deleteNode(root->left, key);
        return root;
        
    }
};
