Problem Statement - 
In this problem, a tree is an undirected graph that is connected and has no cycles.
You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, 
and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.
Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

Example - 
Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    unordered_map<int, int>m;
    int find(int x){
        if(m.find(x)==m.end()) return m[x]=x;
        if(m[x]!=x) m[x]=find(m[x]);
        return m[x];
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        m.clear();    
        for(auto i:edges){
            if(find(i[0])==find(i[1])) return i;
            m[m[i[0]]]=m[m[i[1]]]; // Merging of Roots
        }
        return {};
    }
};
