Problem Statement - 
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example - 
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution -
class Solution {
public:
    void reverse(ListNode* &head){
        ListNode* curr=head, *prev=NULL, *nxt=NULL;
        while(curr) nxt=curr->next, curr->next=prev, prev=curr, curr=nxt;
        head=prev;
        return ;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(!head->next) return NULL;
        ListNode* t=NULL, *nxt=NULL;
        reverse(head);
        t=head;
        if(n==1) nxt=head->next, head->next=NULL, head=nxt;
        else {
            int i=0;
            while(t && i<n-2) t=t->next, i++;
            nxt=t->next;
            if(nxt==head) head=nxt->next;
            if(nxt) t->next=nxt->next, nxt->next=NULL;
        }
        reverse(head);
        return head;
    }
};
