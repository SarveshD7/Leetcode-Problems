Problem Statement - 
Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.
A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:
All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

Example - 
Input: grid = [[0,1],[1,0]]
Output: 2

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int a[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int b[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();
        if(grid[0][0]==1 || grid[m-1][n-1]==1)return -1;
        vector<vector<int>>vis(grid.size(), vector<int>(grid[0].size(), 0));
        queue<pair<pair<int, int>, int>>q;
        q.push({{0, 0}, 0});
        int nr, nc,s,r,c,d, cnt=0;
        while(!q.empty()){
            s=q.size();
            for(int i=0;i<s;i++){
                r=q.front().first.first, c=q.front().first.second, d=q.front().second;
                if(r==m-1 && c==n-1) return d+1;
                for(int i=0;i<8;i++){
                    nr=r+a[i], nc=c+b[i];
                    if(nr>=0 && nc>=0 && nr<grid.size() && nc<grid[0].size() && grid[nr][nc]==0 && vis[nr][nc]==0) vis[nr][nc]=1, q.push({{nr, nc}, d+1}); 
                }       
                q.pop();
            }
        }
        return -1;
    }
};
