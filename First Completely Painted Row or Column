Problem Statement  -
You are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n].
Go through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i].
Return the smallest index i at which either a row or a column will be completely painted in mat.

Example - 
Input: arr = [1,3,4,2], mat = [[1,4],[2,3]]
Output: 2
Explanation: The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2].

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {
        vector<pair<int, int>>v(arr.size()+1, {-1, -1});
        int col_zero=0, i, j, m=mat.size(), n=mat[0].size();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                v[mat[i][j]]={i, j};
                mat[i][j]=0;
            }
        }
        for(int id=0;id<arr.size();id++){
            i=v[arr[id]].first, j=v[arr[id]].second;
            if(j==0) col_zero++;
            else mat[0][j]++;
            mat[i][0]++;
            if(mat[i][0]==n || (j==0 && col_zero==m) || (j!=0 && mat[0][j]==m)) return id;            
        }
        return -1;
    }
};
