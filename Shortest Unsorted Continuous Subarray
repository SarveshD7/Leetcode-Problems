Problem Statement - 
Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.
Return the shortest such subarray and output its length.

Example - 
Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int s=0, e=nums.size()-1, i, mx=INT_MIN, mn=INT_MAX;
        while(s<nums.size()-1 && nums[s]<=nums[s+1]) s++;
        if(s==nums.size()-1) return 0;
        while(e>0 && nums[e]>=nums[e-1]) e--;
        i=s;
        while(i<=e) mn=min(mn, nums[i]), mx=max(mx, nums[i]), i++;
        while(s>0 && nums[s-1]>mn) s--;
        while(e<nums.size()-1 && nums[e+1]<mx) e++;
        return e-s+1;
    }
};
