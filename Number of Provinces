Problem Statement - 
There are n cities. Some of them are connected, while some are not. 
If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.
You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
Return the total number of provinces.

Example - 
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void bfs(vector<vector<int>>&adj, int i, vector<int>&vis){
        queue<int>q;
        int a;
        vis[i]=1;
        q.push(i);
        while(!q.empty()){
            a=q.front();            
            for(int j=0;j<adj[a].size();j++){
                if(adj[a][j]==1 && vis[j]==0) vis[j]=1, q.push(j);
            }
            vis[a]=1;
            q.pop();
        }
        return ;
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int ans=0;
        vector<int>vis(isConnected.size(), 0);
        for(int i=0;i<isConnected.size();i++){
            if(vis[i]==0) bfs(isConnected, i, vis), ans++;
        }
        return ans;
    }
};
