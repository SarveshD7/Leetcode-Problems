Problem Statement - 
There are n cities. Some of them are connected, while some are not. 
If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.
You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
Return the total number of provinces.

Example - 
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

----------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void printVis(vector<int>v){
        cout<<"------VIS------"<<endl;
        for(auto i:v) cout<<i<<" ";
        cout<<endl<<"------------------"<<endl;
    }
    void BFS(int x, vector<vector<int>>& adj, vector<int>&vis){
        queue<int>q;
        q.push(x);
        while(!q.empty()){
            if(vis[q.front()]==0){
            vis[q.front()]=1;
            for(int i = 0;i<adj[q.front()-1].size();i++){
                if(adj[q.front()-1][i]==1 && vis[i+1]==0) q.push(i+1);
            }
            }
            // cout<<q.front()<<endl;
            q.pop();
        }
        return ;
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int ans = 0;
        vector<int>vis(isConnected[0].size()+1, 0);
        for(int i = 1;i<=isConnected.size();i++){
            if(vis[i]==0){
                cout<<i<<endl;
                ans++;
                BFS(i, isConnected, vis);
                printVis(vis);
            }
        }
        return ans;
    }
};
