Problem Statement - 
You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] 
represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.
You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.
Return the answers to all queries. If a single answer cannot be determined, return -1.0.
Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
Note: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.

Example - 
Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? 
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
note: x is undefined => -1.0

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution -
class Solution {
public:
double solve(vector<vector<double>>adj, int &src, int &dst, vector<int>&vis){
    if(src==dst) return 1.0;
    double a=-1;
    for(int i=0;i<adj[src].size();i++){
        if(adj[src][i]>0 && vis[i]==0) {
            vis[i]=1, a=adj[src][i]*solve(adj, i, dst, vis), vis[i]=0;
            if(a>0) return a;
        }        
    }
    return -1;
}
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string, int>m;
        vector<double>ans;
        int id=0, src, dst;
        for(auto i:equations){
            for(auto j:i) if(m.find(j)==m.end()) m[j]=id++;
        }
        vector<vector<double>>adj(m.size(), vector<double>(m.size(), -1));
        vector<int>vis(m.size(), 0);
        id=0;
        for(auto i:equations){
            adj[m[i[0]]][m[i[1]]]=values[id];
            adj[m[i[1]]][m[i[0]]]=1.0/values[id];
            adj[m[i[0]]][m[i[0]]]=1, adj[m[i[1]]][m[i[1]]]=1;
            id++;
        }
        for(auto i:queries){            
            if(m.find(i[0])!=m.end() && m.find(i[1])!=m.end()){
                if(adj[m[i[0]]][m[i[1]]]!=-1) ans.push_back(adj[m[i[0]]][m[i[1]]]);
                else{
                    fill(vis.begin(), vis.end(), 0);
                    src=m[i[0]], dst=m[i[1]];
                    ans.push_back(solve(adj, src, dst, vis));
                }
            }else ans.push_back(-1);
        }
        return ans;
    }
};
