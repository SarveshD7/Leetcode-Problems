Problem Statement - 
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example -
put: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int l=0, r=nums.size()-1, m, minid=INT_MAX, maxid=INT_MIN;
        while(l<=r){
            m=(r-l)/2+l;
            if(nums[m]==target) minid=min(minid, m), r=m-1;
            else if(nums[m]>target) r=m-1;
            else l=m+1;
        }
        l=0, r=nums.size()-1;
        while(l<=r){
            m=(r-l)/2+l;
            if(nums[m]==target) maxid=max(maxid, m), l=m+1;
            else if(nums[m]>target) r=m-1;
            else l=m+1;
        }
        minid=minid!=INT_MAX?minid:-1;
        maxid=maxid!=INT_MIN?maxid:-1;
        return {minid, maxid};
    }
};
