Problem Statement - 
You are given two integers m and n, which represent the dimensions of a matrix.
You are also given the head of a linked list of integers.
Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.
Return the generated matrix.

Example - 
Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {
        int r=0, c=0, rst=0, cst=0, ren=m, cen=n, cnt=0;
        bool u=false, d=false, l=false, rt=true;
        ListNode* t=head;
        vector<vector<int>>ans(m, vector<int>(n,-1));
        while(t && cnt<m*n){
            ans[r][c]=t->val;
            // cout<<r<<" "<<c<<" "<<t->val<<endl;
            if(u){
                if(r-1<rst) u=false, rt=true, c++, cst++;                
                else r--;
            }else if(d){    
                if(r+1>=ren) d=false, l=true, c--, cen--;                
                else r++;
            }else if(l){
                if(c-1<cst) u=true, l=false, r--, ren--;                
                else c--;
            }else{
                if(c+1>=cen) d=true, rt=false, r++, rst++;                
                else c++;
            }
            cnt++;
            t=t->next;
        }
        return ans;

    }
};
