Problem Statement - 
There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
A node is good if all the subtrees rooted at its children have the same size.
Return the number of good nodes in the given tree.
A subtree of treeName is a tree consisting of a node in treeName and all of its descendants.

Example - 
Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]
Output: 7

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int depth(int i, vector<vector<int>>& adj, vector<int>&vis, vector<int>&sizes){
        int dep = 0;
        vis[i] = 1;
        for(auto j:adj[i]){
            if(vis[j]==0){
                dep+=depth(j, adj, vis, sizes);
            }
        }
        return sizes[i] = dep+1;
    }
    void solve(int i, vector<vector<int>>& adj, int&ans, vector<int>&vis,vector<int>&sizes){
        if(vis[i]==1) return ;
        bool flag = true;
        int cmp=-1;
        for(int j = 0;j<adj[i].size();j++){
            if(vis[adj[i][j]]==0){
            if(cmp==-1) cmp = sizes[adj[i][j]];
            else if(cmp!=sizes[adj[i][j]]){
                flag=false;
                break;
            }
          }
        }
        vis[i] = 1;
        if(flag) ans++;
        for(auto j:adj[i]) solve(j, adj, ans, vis, sizes);
        return ;
    }
    int countGoodNodes(vector<vector<int>>& edges) {
        vector<vector<int>>adj(edges.size()+1);
        int ans = 0;
        vector<int>vis(edges.size()+1, 0);
        vector<int>sizes(edges.size()+1, 0);
        for(auto i:edges){
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }
        depth(0, adj, vis, sizes);
        fill(vis.begin(), vis.end(), 0);
        solve(0, adj, ans, vis, sizes);
        return ans;  
    }
};
