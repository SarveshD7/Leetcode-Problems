Problem Statement - 
You are given an integer n and a 2D integer array queries.
There are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1.
queries[i] = [ui, vi] represents the addition of a new unidirectional road from city ui to city vi. After each query, you need to find the length of the shortest path from city 0 to city n - 1.
Return an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.

Example - 
Input: n = 5, queries = [[2,4],[0,2],[0,4]]
Output: [3,2,1]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        vector<int>ans;
        int dst;
        unordered_map<int, vector<int>>m;
        unordered_map<int, int>dist;
        for(int i = 0;i<n;i++){
            if(i!=n-1)
                m[i].push_back(i+1);
            dist[i] = n-i-1;
        }
        int curr = -1, prev = 0;
        for(auto k:queries){
            m[k[0]].push_back(k[1]);
        
        for(int i=k[0];i>=0;i--){
            dst = INT_MAX;
            for(auto j:m[i]) dst = min(dst, 1+dist[j]);
            dist[i] = dst;
        }
            ans.push_back(dist[0]);
        }
        return ans;
    }
};
