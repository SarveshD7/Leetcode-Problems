Problem Statement - 
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example - 
Input: m = 3, n = 7
Output: 28

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>>ans(m, vector<int>(n, 0));
        vector<int>row(n,0);
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(j==0) row[j]=1;
                else row[j]=row[j-1]+row[j]; 
            }
        }
        return row[n-1]; 
    }
};
