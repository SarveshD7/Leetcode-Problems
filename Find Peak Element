Problem Statement - 
A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.

Example - 
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void solve(vector<int>&nums,int l,int r, int&ans){
        if(l>r || ans>-1) return ;
        int m=(r-l)/2+l;
        if(!(m-1>=0 && nums[m]<nums[m-1]) && !(m+1<nums.size() && nums[m]<nums[m+1])) ans=m;
        solve(nums, l, m-1, ans);
        solve(nums, m+1, r, ans);
        return ;
        
    }
    int findPeakElement(vector<int>& nums) {
        int ans=-1, l=0, r=nums.size()-1;
        solve(nums, l, r, ans);
        return ans;
    }
};
