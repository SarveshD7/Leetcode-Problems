Problem Statement - 
Given the head of a linked list, return the list after sorting it in ascending order.

Example - 
Input: head = [4,2,1,3]
Output: [1,2,3,4]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:

    void mergeSort(ListNode* &head){
        if(!head || !head->next) return ;
        else if(!head->next->next){
            if(head->val>head->next->val)swap(head->val, head->next->val);
            return ;
        }
        // cout<<head->val<<endl;
        ListNode* s=head, *f=head, *nxt=NULL, *t1=NULL, *t2=NULL, *pt1=NULL, *pt2=NULL, *fs=head, *ans=NULL;
        while(s && f && f->next) fs=s, s=s->next, f=f->next->next;
        t2=s->next;
        if(s->next) s->next=NULL;
        t1=head;
        mergeSort(t1);
        mergeSort(t2);
        if(t2->val<t1->val) s=t1, t1=t2, t2=s;
        ans=t1;
        while(t1 && t2){
            // if(t1) cout<<"T1 "<<t1->val<<" ";
            // if(t2) cout<<"T2 "<<t2->val;
            // cout<<endl;
            if(t2->val<t1->val) nxt=t2->next, pt1->next=t2, t2->next=t1, pt1=t2, t2=nxt;
            else pt1=t1, t1=t1->next;
        }
        // if(!t1)cout<<"!T1"<<endl;
        // if(!t2)cout<<"!T2"<<endl;
        if(t2) pt1->next=t2;
        head=ans;
        ListNode* temp=head;
        // while(temp) cout<<temp->val<<" ", temp=temp->next;
        // cout<<endl;
        return ;
    }

    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;
        mergeSort(head);
        return head;
    }
};
