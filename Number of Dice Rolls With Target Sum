Problem Statement - 
You have n dice, and each dice has k faces numbered from 1 to k.
Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. 
Since the answer may be too large, return it modulo 109 + 7.

Example - 
Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.
Example 2:

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    long long solve(long long &i, int &n, int &k, int &target, long long &ans, long long &s, vector<vector<long long>>&dp){
        if(i>=n){
            if(s==target) return 1;
            return 0;
        }
        if(dp[i][s]!=-1) return dp[i][s];
        long long cnt=0;
        i++;
        for(long long j=1;j<=k;j++){
            if(s+j<=target) s+=j, cnt= (cnt+solve(i, n, k, target, ans, s, dp))%1000000007, s-=j;            
        }
        i--;
        return dp[i][s]=cnt;      
    }
    int numRollsToTarget(int n, int k, int target) {
        long long ans=0, s=0, i=0;
        vector<vector<long long>>dp(n+1, vector<long long>(target+1, -1));                
        ans = solve(i, n, k, target, ans, s, dp);
        return ans;
    }
};
