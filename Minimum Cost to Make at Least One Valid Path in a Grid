Problem Statement - 
Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:
1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
Notice that there could be some signs on the cells of the grid that point outside the grid.
You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) 
and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.
You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.
Return the minimum cost to make the grid have at least one valid path.

Example -
Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).
The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)
The total cost = 3.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>>q;
        vector<vector<int>>dist(grid.size(), vector<int>(grid[0].size(), INT_MAX));
        q.push({0, {0, 0}});
        dist[0][0]=0;
        int ans=INT_MAX, ni, nj, a, b, c;
        int ar[4] = {0, 0, 1, -1};
        int br[4] = {1, -1, 0, 0};

        while(!q.empty()){
            a=q.top().first, b=q.top().second.first, c=q.top().second.second;
            if(b==grid.size()-1 && c==grid[0].size()-1) return a;
            q.pop();            
            if(a>dist[b][c]) continue;
            for(int i=0;i<4;i++){
                ni=b+ar[i], nj=c+br[i];
                if(ni>=0 && ni<grid.size() && nj>=0 && nj<grid[0].size()){
                    if(i==grid[b][c]-1 && dist[ni][nj]>a) dist[ni][nj]=a, q.push({a, {ni, nj}});
                    else if(i!=grid[b][c]-1 && dist[ni][nj]>a+1) dist[ni][nj]=a+1, q.push({a+1, {ni, nj}});
                }                
            }            
        }
        return ans;
    }
};
