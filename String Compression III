Problem Statement - 
Given a string word, compress it using the following algorithm:
Begin with an empty string comp. While word is not empty, use the following operation:
Remove a maximum length prefix of word made of a single character c repeating at most 9 times.
Append the length of the prefix followed by c to comp.
Return the string comp.

Example - 
Input: word = "abcde"
Output: "1a1b1c1d1e"
Explanation:
Initially, comp = "". Apply the operation 5 times, choosing "a", "b", "c", "d", and "e" as the prefix in each operation.
For each prefix, append "1" followed by the character to comp.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    string compressedString(string word) {
        int cnt=0, i=0;
        string ans="";
        char x;
        while(i<word.size()){
            x=word[i++], cnt=1;
            while(i<word.size() && word[i]==x && cnt<9)cnt++, i++;
            ans+=to_string(cnt), ans+=x;
        }
        return ans;
    }
};
