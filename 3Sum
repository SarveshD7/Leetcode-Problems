Problem Statement  - 
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example - 
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

----------------------------------------------------------------------------------------------------------------------
Solution - 
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        set<vector<int>>s;
        sort(nums.begin(), nums.end());
        vector<vector<int>>ans;
        vector<int>v(3,0);
        int v1, v2, rem, rep=0, siz=0;
        for(int i = 0;i<n;i++){
            int j = i+1;
            int k = n-1;
            while(j<k){
                if(nums[i]+nums[j]+nums[k]>0) k--;
                else if(nums[i]+nums[j]+nums[k
                ]<0) j++;
                else{
                    v[0] = nums[i], v[1] = nums[j], v[2] = nums[k];
                    s.insert(v);
                    j++, k--;
                }
            }
        }
        // cout<<siz<<endl;
        for(auto i:s)ans.push_back(i);
        return ans;
    }
};
