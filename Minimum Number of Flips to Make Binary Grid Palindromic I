Problem Statement - 
You are given an m x n binary matrix grid.
A row or column is considered palindromic if its values read the same forward and backward.
You can flip any number of cells in grid from 0 to 1, or from 1 to 0.
Return the minimum number of cells that need to be flipped to make either all rows palindromic or all columns palindromic.

Example -
Input: grid = [[1,0,0],[0,0,0],[0,0,1]]
Output: 2

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int minFlips(vector<vector<int>>& grid) {
        int a = grid.size()/2, b = grid[0].size()/2;
        int ans1 = 0, ans2 = 0;
        for(int i = 0;i<grid.size();i++){
            for(int j = 0;j<b;j++){
                if(grid[i][j]!=grid[i][grid[0].size()-j-1]) ans1++;
            }
        }
        for(int i = 0;i<grid[0].size();i++){
            for(int j = 0;j<a;j++){
                if(grid[j][i]!=grid[grid.size()-j-1][i]) ans2++;
            }
        }
        return min(ans1, ans2);
    }
};
