Problem Statement - 
Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where:
0 <= i < j < nums.length and
nums[i] > 2 * nums[j].

Example -
Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void mergeSort(vector<int>& nums, long long s, long long e, long long&ans){
        if(s>=e) return ;
        vector<long long>v;
        long long m=(e-s)/2+s, a=s, b=m+1;
        mergeSort(nums, s, m, ans);
        mergeSort(nums, m+1, e, ans);
        a=s, b=m+1;
        while(a<=m && b<=e){
            // cout<<"-- "<<a<<" "<<b<<" --"<<endl;
            if((long long)nums[a]>2*(long long)nums[b])  ans+=(m-a+1), b++; //cout<<a<<" "<<b<<endl,
            else a++;
        } 
        a=s, b=m+1;
        while(a<=m && b<=e){            
            if(nums[a]>nums[b]) v.push_back(nums[b++]);
            else v.push_back(nums[a++]);
        }
        while(a<=m) v.push_back(nums[a++]);
        while(b<=e) v.push_back(nums[b++]);
        a=s, b=0;
        while(b<v.size()) nums[a++]=v[b++];
        return ;
    }
    int reversePairs(vector<int>& nums) {
        long long ans=0;
        mergeSort(nums, 0, nums.size()-1, ans);
        return ans;
    }
};
