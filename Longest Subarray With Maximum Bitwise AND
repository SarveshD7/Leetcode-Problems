Problem Statement - 
You are given an integer array nums of size n.
Consider a non-empty subarray from nums that has the maximum possible bitwise AND.
In other words, let k be the maximum value of the bitwise AND of any subarray of nums. Then, only subarrays with a bitwise AND equal to k should be considered.
Return the length of the longest such subarray.
The bitwise AND of an array is the bitwise AND of all the numbers in it.
A subarray is a contiguous sequence of elements within an array.

Example - 
Input: nums = [1,2,3,3,2,2]
Output: 2
Explanation:
The maximum possible bitwise AND of a subarray is 3.
The longest subarray with that value is [3,3], so we return 2.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int i=0, cnt=0, ans=0, prev=nums[0], mx=INT_MIN;
        while(i<nums.size()){
            while(i<nums.size() && nums[i]==prev) i++, cnt++;
            if(prev>mx) ans=cnt, mx=prev;
            else if(prev==mx) ans=max(cnt, ans);
            if(i<nums.size()) prev=nums[i];
            cnt=0;
        }
        return ans;
    }
};
