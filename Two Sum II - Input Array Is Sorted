Problem Statement - 
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.
Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
The tests are generated such that there is exactly one solution. You may not use the same element twice.
Your solution must use only constant extra space.

Example - 
Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution - 
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int val) {
        vector<int>ans(2,0);
        int st = 0, en = nums.size()-1,n = nums.size();
        while(st<n && en>=0 && st<en){
            // cout<<st<<" "<<en<<endl;
            if(nums[st]+nums[en]>val) en--;
            else if(nums[st]+nums[en]<val) st++;
            else{
                ans[0] = st+1, ans[1] = en+1;
                return ans;
            }
        }
        return ans;
    }
};
