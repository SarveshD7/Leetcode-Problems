Problem Statement - 
You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.

Example - 
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

--------------------------------------------------------------------------------------------------------------------------------------
Solution - 
class Solution {
public:
    int binarySearch(vector<vector<int>>& mat, int t, int row, int col_st, int col_en){
        if(row<0 || row>=mat.size() || col_st<0 || col_en>=mat[0].size() || col_st>=mat[0].size() || col_en<0 || col_st>col_en) return -1;
        int mid = (col_en-col_st)/2+col_st;
        // cout<<row<<" "<<col_st<<" "<<col_en<<" "<<mid<<" "<<mat[row][mid]<<" "<<t<<" "<<mat[row][mat[0].size()-1]<<endl;
        if(t>mat[row][mat[0].size()-1]){
            // cout<<"Here1"<<endl;
            return binarySearch(mat, t, row+1, col_st, col_en);
        } 
        else if(t<mat[row][0]) {
            // cout<<"Here2"<<endl;
            return -1; //binarySearch(mat, t, row-1, col_st, col_en);
        }
        else if(t>mat[row][mid]) {
            // cout<<"Here3"<<endl;
            return binarySearch(mat, t, row, mid+1, col_en);
        }
        else if(t<mat[row][mid]) {
            // cout<<"Here4"<<endl;
            return binarySearch(mat, t, row, col_st, mid-1);
        }
        else {
            // cout<<"Here5"<<endl;
            return 1;
        }
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row_max = matrix.size();
        int col_max = matrix[0].size();
        return binarySearch(matrix, target, 0, 0, col_max-1)!=-1;
    }
};
