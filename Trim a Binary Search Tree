Problem Statement - 
Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. 
Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). 
It can be proven that there is a unique answer.
Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.

Example - 
Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* getSuccessor(TreeNode* curr){
    TreeNode* c = curr->right, *p=NULL; 
    while (c != NULL && c->left != NULL) p=c, c = c->left;
    if(p) p->left=NULL;
    return c;
}
    TreeNode* solve(TreeNode* root, int &l, int &h){
        if(!root) return root;
        
        root->left=solve(root->left, l, h);
        root->right=solve(root->right, l, h);
        TreeNode* ret=root;
        if(root->val<l || root->val>h){
            if(!root->right) ret=root->left, root->left=NULL;
            else if(!root->left) ret=root->right, root->right=NULL;
            else{
                TreeNode* s=getSuccessor(root);
                root->val=s->val;
                ret = root;
            }
        }
        return ret;
    }
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        return solve(root, low, high);
    }
};
