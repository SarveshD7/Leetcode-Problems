Problem Statement - 
You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example - 
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

---------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        if(!list1 && !list2)
            return NULL;
        if(!list1)  
            return list2;
        if(!list2)
            return list1;

        /*ListNode* res = NULL;
        ListNode* rt = NULL;
        ListNode* t1 = list1;
        ListNode* t2 = list2;
        while(t1 && t2){
            if(t1->val<=t2->val){
                if(res==NULL){
                    res = new ListNode(t1->val);
                    rt = res;
                }
                else{   
                    rt->next = new ListNode(t1->val);
                     rt = rt->next;
                }
               t1 = t1->next;
              
            }
             else{
                 if(res==NULL){
                    res = new ListNode(t2->val);
                    rt = res;
                 }
                    else{
                    rt->next = new ListNode(t2->val);
                    rt = rt->next;
                    }
                t2 = t2->next;
                }
            //    rt = rt->next;
        }
        if(t1!=NULL)
            rt->next = t1;
        if(t2!=NULL)
            rt->next = t2;
        return res;*/
        if(list1->val>list2->val){
            ListNode* temp = list1;
            list1 = list2;
            list2 = temp;
        }
        ListNode* p0 = list1;
        ListNode* p1 = list1->next;
        ListNode* p2 = list2;
        while(p1 && p2){
            if(p2->val<=p1->val){
                cout<<p0->val<<" "<<p1->val<<" "<<p2->val<<endl;
                ListNode* temp = p2->next;
                p0->next = p2;
                p2->next = p1;
                p0 = p0->next;
                p2 = temp;
            }else p1 = p1->next, p0 = p0->next;
        }
        while(p2){
            ListNode* temp = p2->next;
                p0->next = p2;
                p2->next = p1;
                p0 = p0->next;
                p2 = temp;
        }
        return list1;



    }
};
