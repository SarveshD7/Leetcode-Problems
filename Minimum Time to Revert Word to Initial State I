Problem Statement - 
You are given a 0-indexed string word and an integer k.
At every second, you must perform the following operations:
Remove the first k characters of word.
Add any k characters to the end of word.
Note that you do not necessarily need to add the same characters that you removed. However, you must perform both operations at every second.
Return the minimum time greater than zero required for word to revert to its initial state.

Example - 
Input: word = "abacaba", k = 3
Output: 2
Explanation: At the 1st second, we remove characters "aba" from the prefix of word, and add characters "bac" to the end of word. Thus, word becomes equal to "cababac".
At the 2nd second, we remove characters "cab" from the prefix of word, and add "aba" to the end of word. Thus, word becomes equal to "abacaba" and reverts to its initial state.
It can be shown that 2 seconds is the minimum time greater than zero required for word to revert to its initial state.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Approach - 
since we can add any characters, lets add '.' and while comparing if we find '.' assume we have matching character and compare only non universal characters
Solution - 
class Solution {
public:
    bool Compare(string word, string target){
        int n = word.size();
        for(int i = 0;i<n;i++){
            if(word[i]!='.'){
                if(word[i]!=target[i]) return false;
            }
        }
        return true;
    }
    int minimumTimeToInitialState(string word, int k) {
        string temp = word;
        string add = "";
        int i = 0, ans=0;
        while(i<k){
            add+='.';
            i++;
        }
        int n = word.size();
        do{
            temp = temp.substr(k, n-k);
            temp+=add;
            ans++;
        }while(!Compare(temp,word));
        return ans;
    }
};
