Problem Statement - 
There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.
When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.
Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.

Example - 
Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void dfs(int i, vector<vector<int>>& r, vector<int>& vis){
        vis[i] = 1;
        for(auto j:r[i]){
            if(vis[j]==0)
                dfs(j, r, vis);
        }
        return ;
    }
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        vector<int>vis(rooms.size(), 0);
        vis[0] = 1;
        dfs(0, rooms, vis);
        for(auto i:vis) if(i==0) {
            cout<<i<<endl;
            return false;
        }
        return true;
    }
};
