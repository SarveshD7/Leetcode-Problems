Problem Statement - 
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node
in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Example - 
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* solve(TreeNode* root, TreeNode* p, TreeNode* q, TreeNode*& ans){
        if(!root) return NULL;
        if(root==p){
            ans=p;
            return ans;
        }if(root==q){
            ans = q;
            return ans;
        }
        int r = root->val, pval = p->val, qval = q->val;
        cout<<r<<" "<<pval<<" "<<qval<<endl;
        if((r>pval && r<qval) || (r<pval && r>qval)){
            ans = root;
            return root;
        }
        else if(r>pval) return solve(root->left, p, q, ans);
        else return solve(root->right, p, q, ans);

    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* ans = NULL;
        solve(root, p, q, ans);
        return ans;
    }
};
