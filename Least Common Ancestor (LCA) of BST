Problem Statement - 
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node
in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Example - 
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void solve(TreeNode* r, TreeNode* p, TreeNode* q, TreeNode* &ans){
        if(!r) return ;
        if(r->val>=min(p->val, q->val) && r->val<=max(p->val, q->val) && !ans) ans=r;
        else if(r->val<min(p->val, q->val)) solve(r->right, p, q, ans);
        else solve(r->left, p, q, ans);
        return ; 
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* ans=NULL;
        solve(root, p, q, ans);
        return ans;      
    }
};
