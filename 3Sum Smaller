Problem Statement - 
Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example - 
Input:  nums = [-2,0,1,3], target = 2
Output: 2
Explanation:
Because there are two triplets which sums are less than 2:
[-2, 0, 1]
[-2, 0, 3]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    /**
     * @param nums:  an array of n integers
     * @param target: a target
     * @return: the number of index triplets satisfy the condition nums[i] + nums[j] + nums[k] < target
     */
    int threeSumSmaller(vector<int> &nums, int target) {
        // Write your code here
        int ans=0;
        int s, e, v;
        sort(nums.begin(), nums.end());
        for(int i=0;i<nums.size();i++){
            s=i+1, e=nums.size()-1;
            while(s<e){
                if(nums[i]+nums[s]+nums[e]>=target) e--;
                else{
                    ans+=e-s;
                    s++;
                }
                
            }
            
        }
        return ans;
    }
};
