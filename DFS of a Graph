Problem Statement - 
You are given a connected undirected graph. Perform a Depth First Traversal of the graph.
Note: Use a recursive approach to find the DFS traversal of the graph
starting from the 0th vertex from left to right according to the graph.

Example - 
Input: V = 5 , adj = [[2,3,1] , [0], [0,4], [0], [2]]
Output: 0 2 4 3 1
Explanation: 
0 is connected to 2, 3, 1.
1 is connected to 0.
2 is connected to 0 and 4.
3 is connected to 0.
4 is connected to 2.
so starting from 0, it will go to 2 then 4,
and then 3 and 1.
Thus dfs will be 0 2 4 3 1.

------------------------------------------------------------------------------------------

Solution - 
class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    void dfs(int i, int v, vector<int>adj[], vector<int>&ans, vector<int>&vis){
      vis[i] = 1;
      
      for(auto a:adj[i]){
          if(vis[a]==0){
              ans.push_back(a);
              dfs(a, v,adj, ans, vis);
          }
      }
    }
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int>ans;
        vector<int>vis(V, 0);
        ans.push_back(0);
        dfs(0,V, adj, ans, vis);
        return ans;
    }
};
