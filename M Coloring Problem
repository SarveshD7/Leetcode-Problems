Problem Statement - 
Given an undirected graph and an integer M.
The task is to determine if the graph can be colored with at most M colors such that no two adjacent vertices of the graph are colored with the same color.
Here coloring of a graph means the assignment of colors to all vertices.
Print 1 if it is possible to colour vertices and 0 otherwise

Example - 
Input:
N = 4
M = 3
E = 5
Edges[] = {(0,1),(1,2),(2,3),(3,0),(0,2)}
Output: 1
Explanation: It is possible to colour the
given graph using 3 colours.

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution{
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool chk(int i, int clr, bool graph[][101], int n,vector<int>color){
        for(int j = 0;j<n;j++)
            if(graph[i][j]==1 && color[j]==clr) return false;
        return true;
    }
    bool solve(int i, bool graph[][101], int m, int n, vector<int>&color){
        if(i>=n){
            return true;
        }
        for(int j = 0;j<m;j++){
            if(chk(i, j, graph, n, color)){
              color[i] = j;
              if(solve(i+1, graph, m,n,color)) return true;
              color[i] = -1;   
            }
        }
        return false;
        
        
    }
    bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        vector<int>color(n,-1);
        return solve(0,graph, m,n,color);
    }
};
