Problem Statement - 
Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. 
(i.e., from left to right, then right to left for the next level and alternate between).

Example - 
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

--------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        vector<vector<int>>ans;
        if(!root) return ans;
        queue<TreeNode*>q;
        q.push(root);
        bool r = true;
        while(!q.empty()){
            vector<int>v;
            stack<int>x;
            int s = q.size();
            // cout<<"Queue size before= "<<s<<endl;
            for(int i = 0;i<s;i++){
            // if(!q.front()) break;
                if(q.front()->left)  q.push(q.front()->left);
                if(q.front()->right) q.push(q.front()->right);
                if(r){
                    v.push_back(q.front()->val);
                }
                else{
                    x.push(q.front()->val);
                }
                q.pop();
            }

            // cout<<"Queue size after= "<<s<<endl;
            if(r){
                ans.push_back(v);
                v.clear();
                r =false;
            }else{
                v.clear();
                while(!x.empty()){
                    v.push_back(x.top());
                    x.pop();
                }
                ans.push_back(v);
                r = true;
            }
            // for(auto i:ans){
            //     for(auto j:i)
            //      cout<<j<<" ";
            //     cout<<endl;
            // }
        }
        return ans;
    }
};
