Problem Statement - 
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is
viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6       7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position 
then consider the extreme ones only(i.e. leftmost and rightmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

Example -

Input:
      1
   /    \
  2      3
Output: 2 1 3

Solution - 
class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        //Your code here
        map<int, int>m;
        queue<pair<Node* , int>>q;
        q.push({root, 0});
        while(!q.empty()){
            Node* node = q.front().first;
            int level = q.front().second;
            q.pop();
            if(m[level]==0) m[level]=node->data;
            if(node->left) q.push({node->left, level-1});
            if(node->right) q.push({node->right, level+1});
        }
        vector<int>ans;
        for(auto i:m) ans.push_back(i.second);
        return ans;
    }

};
