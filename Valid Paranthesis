Problem Statement - 
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Example - 
Input: s = "()"
Output: true

---------------------------------------------------------------------------------------------------------------------------------------------------------

Solution -
#include<stack>
class Solution {
public:
    bool isValid(string s) {
        int i=0;
        stack<char>x;
        // if(s.length()==1)
        //     return false;
        // if(s[0]=='}'||s[0]==')'||s[0]==']')
        //     return false;
        while(i<s.length()){
            if(s[i]=='(' || s[i]=='{'|| s[i]=='[')
                x.push(s[i]);
            else{
                if(x.empty())
                    return false;
                    
                else if( (s[i]=='}' && x.top()=='{')||(s[i]==')' && x.top()=='(')||(s[i]==']'&& x.top()=='['))
                    x.pop();
                else
                    return false;
            }
                        
            i++;
        }
        if(x.empty())
        return true;
        else
        return false;
    }
};
