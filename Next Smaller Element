Problem Statement - 
Given an array, find the nearest smaller element G[i] for every element A[i] in the array such that the element has an index smaller than i.
More formally, G[i] for an element A[i] = an element A[j] such that j is maximum possible AND j < i AND A[j] < A[i] 
Elements for which no smaller element exist, consider next smaller element as -1.

Example - 
Input 1:
    A = [4, 5, 2, 10, 8]
Output 1:
    G = [-1, 4, -1, 2, 2]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
vector<int> Solution::prevSmaller(vector<int> &A) {
    stack<pair<int, int>> x;
    unordered_map<int, int>m;
    for(int i=A.size()-1;i>=0;i--){
        while(!x.empty() && A[i]<x.top().first) m[x.top().second]=A[i], x.pop();
        x.push({A[i], i});
    }
    for(int i=0;i<A.size();i++){
        if(m.find(i)!=m.end()) A[i]=m[i];
        else A[i]=-1;
    }
    return A;

}
