Problem Statement -
Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.
For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).
Two binary trees are considered leaf-similar if their leaf value sequence is the same.
Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

Example - 
Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solutions - 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, vector<int>&ans){
        if(!root) return ;
        if(!root->left && !root->right){
             ans.push_back(root->val);
             return ;
        }
        solve(root->left, ans);
        solve(root->right, ans);
        return ;
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int>v1, v2;
        solve(root1, v1);
        solve(root2, v2);
        if(v1.size()==v2.size()){
            for(int i = 0;i<v1.size();i++)
                if(v1[i]!=v2[i]) return false;
        }else return false;
        return true;
    }
};
