Problem Statement - 
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.

Example - 
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Solution - 
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        map<int, int, greater<int>>m;
        vector<int>ans;
        int i = 0, n = nums.size();
        while(i<k){
            m[nums[i]]++;
            i++;
        }
        map<int,int>::iterator it = m.begin();
        ans.push_back(it->first);
        int start = 0;
        while(i<n){
            m[nums[i]]++;
            m[nums[start]]--;
            if(m[nums[start]]==0) m.erase(nums[start]);
            it = m.begin();
            int maxe = it->first;
            ans.push_back(maxe);
            start++,i++;
        }
        return ans;
    }
};
