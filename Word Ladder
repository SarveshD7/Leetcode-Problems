Problem Statement - 
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

Example - 
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
**************************************************** NOT THE OPTIMAL SOLUTION BUT MY APPROACH ****************************************************
class Solution {
public:
    int findDist(string&s1, string&s2){
        int ans=0;
        for(int i=0;i<s1.size();i++){
            if(s1[i]!=s2[i]) ans++;
        }
        return ans;
    }
    int findMinDist(vector<int>&dist, vector<int>&vis){
        int md=INT_MAX, mid=-1;
        for(int i=0;i<dist.size();i++){
            if(vis[i]==0){
                if(dist[i]<md) md=dist[i], mid=i;
            }
        }
        return mid;
    }
    void solve(int id, vector<vector<int>>&adj, vector<int>&dist, vector<int>&vis){
        
        dist[id]=0;
        int j;
        for(int i=0;i<adj.size();i++){
            j=findMinDist(dist, vis);
            if(j!=-1){
                vis[j]=1;
                for(int k=0;k<adj.size();k++){
                    if(vis[k]==0 && adj[j][k]==1 && adj[j][k]+dist[j]<dist[k]) dist[k]=adj[j][k]+dist[j];//, cout<<j<<" "<<k<<" "<<adj[j][k]<<" "<<dist[j]<<" "<<dist[k]<<endl;
                }
            }
        }
        return ;
    }
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        bool f1=false, f2=false;
        int endId=-1, startId=-1,d=0;
        for(int i=0;i<wordList.size();i++){ 
            if(wordList[i]==endWord) f1=true, endId=i;
            else if(wordList[i]==beginWord) f2=true, startId=i;
        }
        if(!f1) return 0;
        if(!f2) wordList.insert(wordList.begin(), beginWord), startId=0, endId++;
        if(!f1) wordList.push_back(endWord),endId=wordList.size()-1;
        vector<vector<int>>adj(wordList.size(), vector<int>(wordList.size(), -1));
        vector<int>vis(wordList.size(), 0);
        vector<int>dist(wordList.size(), INT_MAX);
        for(int i=0;i<wordList.size();i++){
            for(int j=i+1;j<wordList.size();j++) d=findDist(wordList[i], wordList[j]), adj[i][j]=d, adj[j][i]=d;
        }
        solve(startId, adj, dist, vis);
        return dist[endId]!=INT_MAX?dist[endId]+1:0;
    }
};
