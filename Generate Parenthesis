Problem Statement - 
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example - 
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

-------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void solve(int i, int n, set<string>& ans, string v){
        if(i>n){
            ans.insert(v);
            return ;
        }
        for(int j = 0;j<2*n;j++){
            if(v[j]=='*'){
                v[j] = '(';
            for(int k = j+1;k<2*n;k++){
                if(v[k]=='*'){
                    v[k] = ')';
                    solve(i+1, n, ans, v);
                    v[k] = '*';
                }
            }
            v[j] = '*';
            }
        }
        return ;
    }
    bool check(string s){
        stack<char>x;
        for(auto i:s){
            if(x.empty() || i=='(') x.push(i);
            else{
                if(x.top()=='(')    x.pop();
                else return false;
            }
        }
        return x.empty();
    }
    void solve2(int i, int n, vector<string>&ans, string v){
        if(i>2*n-1){
            if(check(v))    ans.push_back(v);
            return ;
        }
        v[i] = '(';
        solve2(i+1,n,ans,v);
        v[i] = ')';
        solve2(i+1, n, ans,v);
        v[i] = '*';
        return ;
    }
    vector<string> generateParenthesis(int n) {
        set<string>ans;
        vector<string>res;
        string v = "";
        for(int i = 0;i<2*n;i++)    v+='*';
        v[0] = '(';
        v[2*n-1] = ')';
        solve2(1, n, res, v);
        // for(auto i:ans) res.push_back(i);
        return res;
    }
};
