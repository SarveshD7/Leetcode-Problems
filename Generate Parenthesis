Problem Statement - 
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example - 
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

-------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void solve(int i, int n, int c1, int c2, string t, vector<string>&ans){
        if(i>=2*n-1){
            // cout<<t<<endl;
            if(c1==c2 && c1==n)
                ans.push_back(t);
            return ;
        }
        // cout<<i<<" "<<t<<endl;
        string temp = t;
        if(c1<n){
            temp+='(';
            solve(i+1, n, c1+1, c2, temp, ans);
        }
        temp = t;
        if(c2<c1){
            temp+=')';
            solve(i+1, n, c1, c2+1, temp, ans);
        }

        return ;
    }
    vector<string> generateParenthesis(int n) {
        vector<string>ans;
        string t = "(";
        int i = 0, c1 = 1, c2 = 0;
        solve(i, n, c1, c2, t, ans);
        return ans;
    }
};
