Problem Statement - 
Given a linked list where nodes can contain values 0s, 1s, and 2s only. 
The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to the head side, 2s at the end of the linked list, and 1s in the middle of 0s and 2s.

Example - 
Input: LinkedList: 1->2->2->1->2->0->2->2
Output: 0->1->1->2->2->2->2->2

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
****************POINTERS HANDLING METHOD******************
class Solution {
  public:
    // Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node* head) {
        if(!head || !head->next) return head;
        // Add code here
        Node* o=NULL, *z=NULL, *t=NULL, *temp=head, *nxt=NULL, *zh=NULL, *oh=NULL, *th=NULL, *ans=NULL;
        while(temp){
            nxt=temp->next;
            if(temp->next) temp->next=NULL;
            if(temp->data==0){
                if(!z) z=temp, zh=z;
                else z->next=temp, z=temp;
                
            }else if(temp->data==1){
                if(!o) o=temp, oh=o;
                else o->next=temp, o=temp;
                
            }else if(temp->data==2){
                if(!t) t=temp, th=t;
                else t->next=temp, t=temp;
                
            }
            temp=nxt;
        }
        if(zh && oh) z->next=oh, o->next=th;
        else if(!oh && zh) z->next=th;
        else if(!zh && oh) o->next=th, zh=oh;
        else return th;
        return zh;
    }
};
