Problem Statement - 
Given an array of intervals intervals where intervals[i] = [starti, endi].
Return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Example - 
Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

--------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    static bool cmp(vector<int>v1, vector<int>v2){
        if(v1[0]!=v2[0]) return v1[0]<v2[0];
        return v1[1]<v2[1];
    }
    int eraseOverlapIntervals(vector<vector<int>>& v) {
        if(v.size()<=1) return 0;
        int ans = 0;
        sort(v.begin(), v.end(), cmp);
        int prevEnd = v[0][1];
        for(int i = 1; i < v.size(); i++) {
            if(v[i][0] < prevEnd) {
                ans++;
                prevEnd = min(prevEnd, v[i][1]);
            } else {
                prevEnd = v[i][1];
            }
        }
        return ans;
    }
};
