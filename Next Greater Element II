Problem Statement - 
Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.
The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. 
If it doesn't exist, return -1 for this number.

Example - 
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        stack<pair<int ,int>>x;
        int mx=INT_MIN;
        unordered_map<int, int>m;
        int id=0;
        for(auto i:nums){
            while(!x.empty() && i>x.top().first) m[x.top().second]=i, x.pop();
            x.push({i, id});
            mx=max(mx, i);
            id++;
        }
        id=0;
        for(auto i:nums){
            while(!x.empty() && i>x.top().first) m[x.top().second]=i, x.pop();
            if(i==mx) m[id]=-1;
            id++;
        }
        for(auto i:m) nums[i.first]=i.second;
        return nums;
    }
};
