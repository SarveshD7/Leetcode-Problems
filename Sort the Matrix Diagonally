Problem Statement - 
A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. 
For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].
Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.

Example - 
Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {
        vector<int>v;
        int i, j, id;
        for(int k=0;k<mat.size();k++){
            i=k,j=0;
            v.clear();
            while(i<mat.size() && j<mat[0].size()) v.push_back(mat[i][j]), i++, j++;
            sort(v.begin(), v.end());
            i=k,j=0, id=0;
            while(i<mat.size() && j<mat[0].size()) mat[i][j]=v[id++], i++, j++;
        }
        for(int k=0;k<mat[0].size();k++){
            i=0,j=k;
            v.clear();
            while(i<mat.size() && j<mat[0].size()) v.push_back(mat[i][j]), i++, j++;
            sort(v.begin(), v.end());
            i=0,j=k, id=0;
            while(i<mat.size() && j<mat[0].size()) mat[i][j]=v[id++], i++, j++;
        }
        return mat;
    }
};
