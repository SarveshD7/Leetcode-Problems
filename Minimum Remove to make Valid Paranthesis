Problem Statement - 
Given a string s of '(' , ')' and lowercase English characters.
Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
Formally, a parentheses string is valid if and only if:
It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.

Example - 
Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

----------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        stack<pair<char, int>>x;
        unordered_map<int, int>m;
        for(int i = 0;i<s.size();i++)
            m[i] = 0;
        for(int i = 0;i<s.size();i++){
            if((x.empty() && (s[i]=='(' || s[i]==')')) || s[i]=='(')
                x.push({s[i], i});
            else if(s[i]==')' && x.top().first=='(')x.pop();
            else if(s[i]==')' && x.top().first!='(')m[i] = -1;
        }
        while(!x.empty()){
            int id = x.top().second;
            m[id] = -1;
            x.pop();
        }
        string res = "";
        for(int i = 0;i<s.size();i++){
            if(m[i]>=0)
                res+=s[i];
        }
        return res;
    }
};
