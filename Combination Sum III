Problem Statement - 
Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Example - 
Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    void solve(int i, vector<int>&nums, vector<int>v, int s, int &t, int&k, vector<vector<int>>&ans){
        if(i>=nums.size()){
            if(s==t && v.size()==k) ans.push_back(v);
            return ;
        }
        // PICK
        if(s+nums[i]<=t && v.size()<k){
            v.push_back(nums[i]);
            solve(i+1, nums, v, s+nums[i], t, k, ans);
            v.pop_back();
        }
        // NOT PICK
        solve(i+1, nums, v, s, t, k, ans);
        return ;
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int>nums={1,2,3,4,5,6,7,8,9};
        vector<vector<int>>ans;
        vector<int>v;
        int s=0;
        solve(0, nums, v, s, n, k, ans);
        return ans;
    }
};
