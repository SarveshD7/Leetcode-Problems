Problem Statement - 
Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray).
The subsequence must be strictly increasing.
A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].

Example - 
Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.

---------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        int i = 0;
        int ans = 1, cnt = 1;
        while(i<nums.size()-1){
            if(nums[i+1]>nums[i]) cnt++;
            else{
                ans = max(ans, cnt);
                cnt = 1;
            }
            // cout<<nums[i+1]<<" "<<nums[i]<<" "<<ans<<endl;
            i++;
        }
        ans = max(cnt, ans);
        return ans;
    }
};
