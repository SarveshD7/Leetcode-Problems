Problem Statement - 
Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray).
The subsequence must be strictly increasing.
A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].

Example - 
Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.

---------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int ans=0, i=0, cnt=0, val;
        unordered_map<int, int>m;
        for(auto j:nums) m[j]++;
        while(i<nums.size()){
            if(m.find(nums[i]-1)==m.end()){
                cnt=1;
                val=nums[i]+1;
                while(m.find(val)!=m.end()) cnt++, val++;
                ans=max(ans, cnt);
            }
            i++;
        }
        return ans;
    }
};
