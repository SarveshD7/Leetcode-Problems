Problem Statement - 
You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:
Connect: A cell is connected to adjacent cells horizontally or vertically.
Region: To form a region connect every 'O' cell.
Surround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board.
A surrounded region is captured by replacing all 'O's with 'X's in the input matrix board.

Example - 
Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int a[4] = {1, 0, -1, 0};
    int b[4] = {0, 1, 0, -1};
    void dfs(int &r, int &c, vector<vector<char>>&adj){
        adj[r][c]='*';
        int nr, nc;
        for(int i=0;i<4;i++){
            nr=r+a[i], nc=c+b[i];
            if(nr>=0 && nc>=0 && nr<adj.size() && nc<adj[0].size() && adj[nr][nc]=='O') dfs(nr, nc, adj); 
        }
        return ;
    }
    void solve(vector<vector<char>>& board) {
        int j;
        for(int i=0;i<board.size();i++){
            if(board[i][0]=='O' ) j=0, dfs(i, j, board );
            if(board[i][board[0].size()-1]=='O') j=board[0].size()-1, dfs(i, j, board );
        }
        for(int i=0;i<board[0].size();i++){
            if(board[0][i]=='O' ) j=0, dfs(j, i, board );
            if(board[board.size()-1][i]=='O') j=board.size()-1, dfs(j, i, board );
        }
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[i].size();j++){
                if(board[i][j]=='O') board[i][j]='X';
                else if(board[i][j]=='*') board[i][j]='O';
            }
        }        
    }
};
