Problem Statement - 
You are given a 0-indexed array nums consisting of positive integers. You can choose two indices i and j, such that i != j, 
and the sum of digits of the number nums[i] is equal to that of nums[j].
Return the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.

Example - 
Input: nums = [18,43,36,13,7]
Output: 54
Explanation: The pairs (i, j) that satisfy the conditions are:
- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.
- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.
So the maximum sum that we can obtain is 54.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int maximumSum(vector<int>& nums) {
     unordered_map<int, pair<int, int>>m;
     int v=0, a;
     for(auto i:nums){
        a=i, v=0;
        while(a){
            v+=a%10;
            a/=10;
        } 
        if(m.find(v)==m.end()) m[v]={i, INT_MIN};
        else{
            if(i>m[v].first) m[v].second=m[v].first, m[v].first=i;
            else m[v].second=max(m[v].second,i);
        }
     }   
     a=-1;
    for(auto i:m){
        if(i.second.second!=INT_MIN)
        a=max(a, i.second.first+i.second.second);
    }
    return a;
    }
};
