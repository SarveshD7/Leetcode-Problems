Problem Statement - 
Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example - 
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
*******************CATCH - SORT THE NUMS ARRAY BEFORE THE ACTUAL SOLVING********************
NON SET APPROACH - 
class Solution {
public:
    void solve(int i, vector<int>&nums, vector<int>&v, vector<vector<int>>&ans){
        if(i>=nums.size()){
            ans.push_back(v);
            return ;
        }
        // PICK
        v.push_back(nums[i]);
        solve(i+1, nums, v, ans);
        v.pop_back();
        // NOT PICK
        solve(i+1, nums, v, ans);
        return ;
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<int>v;
        vector<vector<int>>ans;
        int i=0;
        solve(i, nums, v, ans);
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return ans;
    }
};

SET APPROACH 
class Solution {
public:
    void solve(int i, vector<int>nums, set<vector<int>>& ans, vector<int>v){
        if(i>=nums.size()){
            ans.insert(v);
            return ;
        }
        int ele = nums[i];
        solve(i+1, nums, ans, v);
        
        v.push_back(ele);
        solve(i+1, nums, ans, v);
        v.pop_back();
        // return ;
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        set<vector<int>>ans;
        vector<vector<int>>res;
        vector<int>v;
        solve(0,nums, ans, v);
        for(auto i:ans) res.push_back(i);
        return res;
    }
};
