Problem Statement - 
There is a 1-indexed 8 x 8 chessboard containing 3 pieces.
You are given 6 integers a, b, c, d, e, and f where:
(a, b)denotes the position of the white rook.
(c, d)denotes the position of the white bishop.
(e, f)denotes the position of the black queen.
Given that you can only move the white pieces, return the minimum number of moves required to capture the black queen.
Note that:
Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.
Bishops can move any number of squares diagonally, but cannot jump over other pieces.
A rook or a bishop can capture the queen if it is located in a square that they can move to.
The queen does not move.

Example - 
Input: a = 1, b = 1, c = 8, d = 8, e = 2, f = 3
Output: 2
Explanation: We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).
It is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {
        // If bishop and queen on the same square then the answer will be 1 or 2
        // Else answer will be no of moves required by rook
        // To check white square = x+y must be even
        // To check black square = x+y must be odd
        int q,r,bs, ans1 = INT_MAX, ans2 = INT_MAX;
        q = (e+f);
        bs = (c+d);
        if((q%2==0 && bs%2==0)||(q%2!=0 && bs%2!=0)){
            if((c+d==e+f && c+d!=a+b) || (c-d==e-f && c-d!=a-b)) ans1 = 1;
            else if((c+d==e+f && c+d==a+b && (a<min(c, e) || a>max(c, e))) || (c-d==e-f && c-d==a-b && (a<min(c, e) || a>max(c, e)))) ans1 = 1;
            else if((c+d==e+f && c+d==a+b) || (c-d==e-f && c-d==a-b)) ans1 = 3;
            else ans1 = 2;
        }
        if(a==e){
            if(a!=c) ans2 = 1;
            else if(d>max(b, f) || d<min(b, f)) ans2= 1;
            else ans2 = 2;
        }
        else if(b==f){
            if(b!=d) ans2 = 1;
            else if(c>max(a, e) || c<min(a, e)) ans2 = 1;
            else ans2 = 2;
        }else ans2 = 2;
        cout<<ans1<<" "<<ans2<<endl;
        return min(ans1, ans2);

    }
};
