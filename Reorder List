Problem Statement - 
You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Example - 
Input: head = [1,2,3,4]
Output: [1,4,2,3]

-----------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        stack<ListNode* >x;
        ListNode* fast = head, *slow = head;
        while(fast && fast->next)
            fast = fast->next->next, slow = slow->next;
        ListNode* t = slow;
        while(t){
            x.push(t);
            t = t->next;
        }
        t = head;
        while(t!=slow){
            ListNode* add = x.top();
            ListNode* tNext = t->next;
            t->next = add;
            // add->next = NULL;
            add->next = tNext;
            t = tNext;
            x.pop();
        }
        t->next=NULL;
    }
};
