Problem Statement - 
You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Example - 
Input: head = [1,2,3,4]
Output: [1,4,2,3]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rev(ListNode* h){
        ListNode* c=h, *p=NULL, *t;
        while(c) t=c->next, c->next=p, p=c, c=t;
        return p;
    }
    void reorderList(ListNode* head) {
        ListNode* s=head, *f=head, *h1=NULL, *h2=NULL, *t1=NULL, *t2=NULL, *n1=NULL, *n2=NULL;
        while(f && f->next) s=s->next, f=f->next->next;
        h2=rev(s);
        t1=head, t2=h2;
        while(t1 && t2){
            n1=t1->next, n2=t2->next;
            if(t1!=t2) t1->next=t2;
            if(t2!=n1) t2->next=n1;
            t1=n1, t2=n2;
        }
        return ;
    }
};
