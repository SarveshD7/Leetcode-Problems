Problem Statement - 
You are given an integer array nums, an integer k, and an integer multiplier.

You need to perform k operations on nums. In each operation:

Find the minimum value x in nums. If there are multiple occurrences of the minimum value, select the one that appears first.
Replace the selected minimum value x with x * multiplier.
Return an integer array denoting the final state of nums after performing all k operations.

Example - 
Input: nums = [2,1,3,5,6], k = 5, multiplier = 2
Output: [8,4,6,5,6]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    struct Compare {
    bool operator()(const pair<int, int>& a, const pair<int, int>& b) {
        if (a.first == b.first)
            return a.second > b.second; 
        return a.first > b.first; 
    }
};
    vector<int> getFinalState(vector<int>& nums, int k, int multiplier) {
        priority_queue<pair<int,int>, vector<pair<int, int>>, Compare>q;
        for(int i = 0;i<nums.size();i++){
            q.push({nums[i], i});
        }
        int a, b;
        // while(!q.empty()){
        //     cout<<q.top().first<<" "<<q.top().second<<endl;
        //     q.pop();
        // }
        while(k--){
            a = q.top().first;
            b = q.top().second;
            q.pop();
            nums[b]*=multiplier;
            q.push({nums[b], b});
        }
        return nums;
    }
};
