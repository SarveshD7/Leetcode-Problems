Problem Statement - 
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example - 
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

-----------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int prod = 1, zeros = 0;
        for(auto i:nums){
            if(i==0) zeros++;
            else prod*=i;
        }
        if(zeros>1){
             fill(nums.begin(), nums.end(), 0);
            return nums;
        }
        if(zeros>0){
        for(int i = 0;i<nums.size();i++){
            if(nums[i]==0) nums[i] = prod;
            else nums[i] = 0;
        }
        return nums;
        }
        else{
            for(int i =0;i<nums.size();i++){
                nums[i] = prod/nums[i];
            }
            return nums;
        }
    }
};
