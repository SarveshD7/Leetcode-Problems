Problem Statement -
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example - 
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution -
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        unordered_map<long long, int>m;
        // sort(nums.begin(), nums.end());
        int k = 0;
        for(auto i:nums)
            m[i] = k++;
        set<vector<int>>res;
        vector<vector<int>>ans;
        for(int i = 0;i<nums.size();i++){
            for(int j = i+1;j<nums.size();j++){
                for(int k = j+1;k<nums.size();k++){
                    long long sum = nums[i]+nums[j];
                    sum+=nums[k];
                    if(m.find(target-sum)!=m.end()){
                        if(m[target-sum]!=i && m[target-sum]!=j && m[target-sum]!=k){
                            vector<int>v(4,0);
                            v[0] = nums[i], v[1] = nums[j], v[2] = nums[k], v[3] = target-sum;
                            sort(v.begin(), v.end());
                            res.insert(v);
                        }
                    }
                }
            }
        }
        for(auto i:res)
            ans.push_back(i);
        return ans;
    }
};
