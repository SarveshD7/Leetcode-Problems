Problem Link - 
A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)
 
Example - 
Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int solve(stack<int>x, vector<vector<int>>&v, int n){
        while(x.size()>1){
            int a = x.top();
            x.pop();
            int b = x.top();
            x.pop();
            if(v[b][a]==1 && v[a][b]==0) x.push(a);
            else if(v[a][b]==1 && v[b][a]==0) x.push(b);
            else x.push(a);    
        }
        int rem = x.top();
        for(auto i:v[rem]) if(i==1) return -1;
        for(int i = 0;i<n;i++){
            if(i!=rem && v[i][rem]==0) return -1;
        }
        return rem;
    }
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        stack<int>x;
        int i = 0;
        while(i<n){
            x.push(i);
            i++;
        }
        return solve(x, M, n);
    }
};
