Problem Statement - 
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Example - 
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode* >q;
        vector<vector<int>>res;
        q.push(root);
        while(!q.empty()){
            vector<int>v;
            int s = q.size();
            for(int i=0;i<s;i++){
               TreeNode* a = q.front();
                if( a && a->left) q.push(a->left);
                if( a && a->right) q.push(a->right);
                if(a) v.push_back(a->val);
                q.pop();
            }
            if(v.size()!=0) res.push_back(v);
        }
        return res;
    }
};
