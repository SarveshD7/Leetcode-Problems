Problem Statement - 
You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). 
You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). 
You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.
A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

Example - 
Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int ar[4] = {-1, 0, 1, 0};
    int br[4] = {0, -1, 0, 1};    
    int minimumEffortPath(vector<vector<int>>& heights) {
        int a, b, c, ans=INT_MAX,ni, nj, m=heights.size(), n=heights[0].size();
        vector<vector<int>>vis(heights.size(), vector<int>(heights[0].size(), 0));
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>>pq;
        pq.push({0, {0, 0}});        
        while(!pq.empty()){
            a=pq.top().first, b=pq.top().second.first, c=pq.top().second.second;
            pq.pop();
            if(b==m-1 && c==n-1) ans=min(ans, a);
            if(vis[b][c]==1) continue;
            vis[b][c]=1;
            for(int k=0;k<4;k++){
                ni=b+ar[k], nj=c+br[k];
                if(ni>=0 && nj>=0 && ni<m && nj<n)  pq.push({max(a, abs(heights[b][c]-heights[ni][nj])),{ni, nj}});
            }
        }      
        return ans;
    }
};
