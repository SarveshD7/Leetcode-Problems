Problem Statement -
Given a Directed Acyclic Graph (DAG) with V vertices and E edges, Find any Topological Sorting of that Graph.

Example - 
Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	void dfs(int i, vector<int>adj[], int V, vector<int>&ans, vector<int>&vis){
	   // if(i>=V) return ;
	    vis[i]=1;
	    
	    for(auto j:adj[i]){
	        if(vis[j]==0) dfs(j, adj, V, ans, vis);
	    }
	   // cout<<i<<endl;
	    ans.insert(ans.begin(), i);
	    return ;
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int>vis(V, 0), ans;
	    for(int i=0;i<V;i++){
	        if(vis[i]==0) dfs(i, adj, V, ans, vis);
	    }
	    for(auto i:ans)  cout<<i<<" ";
	    cout<<endl;
	    return ans;
	}
};
