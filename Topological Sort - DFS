Problem Statement -
Given a Directed Acyclic Graph (DAG) with V vertices and E edges, Find any Topological Sorting of that Graph.

Example - 
Output:
1
Explanation:
The output 1 denotes that the order is
valid. So, if you have, implemented
your function correctly, then output
would be 1 for all test cases.
One possible Topological order for the
graph is 3, 2, 1, 0.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution
{
	public:
	    
	 void dfs(int i, int v, vector<int>adj[], stack<int>&x,vector<int>&vis){
	     vis[i] = 1;
	     for(auto a:adj[i]){
	         if(vis[a]==0){
	             dfs(a,v, adj, x, vis);
	     }
	     }
	     x.push(i);
	     return ;
	 }
	    
	
	//Function to return list containing vertices in Topological order. 
	void findIndegree(vector<int>adj[], vector<int>&ind, int V){
	    for(int i = 0;i<V;i++)
	        for(auto j:adj[i]) ind[j]++;
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    vector<int>ans;
	    vector<int>vis(V,0);
	   // vector<int> ind(V,0);
	   // findIndegree(adj, ind,V);
	   // queue<int>q;
	   // for(int i = 0;i<V;i++)
	   //     if(ind[i]==0) q.push(i);
	   //while(!q.empty()){
	   //    int a = q.front();
	   //    for(auto i:adj[a]){
	   //        ind[i]--;
	   //        if(ind[i]==0) q.push(i);
	   //    }
	   //    ans.push_back(a);
	   //    q.pop();
	   //}
	   stack<int>x;
	   for(int i = 0;i<V;i++)
	        if(vis[i]==0) dfs(i, V, adj, x, vis);
	   while(!x.empty()){
	       ans.push_back(x.top());
	       x.pop();
	   }
	   return ans;
	}
};
