Problem Statement - 
You are given an integer array bloomDay, an integer m and an integer k.
You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.
The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.
Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

Example - 
Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int minDays(vector<int>& v, int m, int k) {
        long long mx=INT_MIN, l, r, md, ans, cnt1,cnt2, mn=INT_MAX, i, n=v.size();
        if((long long)m*(long long)k>n) return -1;
        for(auto i:v) mx=max(mx,(long long)i), mn=min(mn,(long long)i);
        ans=mx;
        l=mn, r=mx;
        while(l<=r){
            md=(r-l)/2+l;
            cnt1=cnt2=0;
            i=0;
            while(i<n){
                cnt1=0;
                while(i<n && md>=v[i]){ 
                    cnt1++;
                    if(cnt1%k==0) cnt2++;
                    i++;
                }
                i++;
            }
            // if(cnt1>0 && cnt1%k==0) cnt2++;
            // cout<<l<<" "<<md<<" "<<r<<" "<<cnt2<<" "<<ans<<endl;
            if(cnt2>=m) ans=min(ans, md), r=md-1;
            else l=md+1;
        }
        return ans;
    }
};
