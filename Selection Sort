Problem Statement - 
Given an unsorted array of size N, use selection sort to sort arr[] in increasing order.

Example -
Input:
N = 5
arr[] = {4, 1, 3, 9, 7}
Output:
1 3 4 7 9
Explanation:
Maintain sorted (in bold) and unsorted subarrays.
Select 1. Array becomes 1 4 3 9 7.
Select 3. Array becomes 1 3 4 9 7.
Select 4. Array becomes 1 3 4 9 7.
Select 7. Array becomes 1 3 4 7 9.
Select 9. Array becomes 1 3 4 7 9.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution{
    public:
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        // Complete the function
        unordered_map<int, int>m;
        int i=0, ans=0, s=0, e=0;
        while(e<N){
            s+=A[e];
            if(s==K)  ans=max(ans, e+1); // cout<<"h1 "<<e<<" "<<s<<" "<<ans<<endl,
            if(m.find(s-K)!=m.end())  ans=max(ans, e-m[s-K]); //, cout<<" "<<ans<<endl; //, cout<<"h2 "<<e<<" "<<s<<" "<<s-K<<" "<<m[s-K]<<" "<<ans,
            if(m.find(s)==m.end()) m[s]=e;
            e++;
        }
        return ans;
        
    } 

};
