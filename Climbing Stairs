Problem Statement - 
You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example - 
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int solve(int s, vector<int>&dp){
        if(s<=0){
            if(s==0) return 1;
            return 0;
        }
        if(dp[s]!=-1) return dp[s];
        return dp[s]=solve(s-1, dp)+solve(s-2, dp);
    }
    int climbStairs(int n) {
        // MEMOIAZATION
        // int i=0, s=n;
        // vector<int>dp(46, -1);
        // return solve(s, dp);

        // TABULATION 
        if(n<=2) return n;
        int a=1, b=2, t;
        for(int i=3;i<=n;i++) t=a, a=b, b+=t;
        return b;
    }
};
