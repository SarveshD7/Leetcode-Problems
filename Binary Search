Problem Statement - 
DAILY PROBLEM -
Given array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. 
If target exists, then return its index. Otherwise, return -1.
You must write an algorithm with O(log n) runtime complexity.

Example - 
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int binarySearch(vector<int>nums, int start, int end, int target){
        if(start>end)return -1;
        else if(start==end){
            if(nums[start]==target) return start;
            else return -1;
        }
        int mid = (end-start)/2 + start;
        if(nums[mid]==target) return mid;
        else if(nums[mid]<target) return binarySearch(nums, mid+1, end,target);
        else return binarySearch(nums,start, mid-1, target);
    }
    int search(vector<int>& nums, int target) {
        return binarySearch(nums, 0, nums.size()-1, target);
    }
};
