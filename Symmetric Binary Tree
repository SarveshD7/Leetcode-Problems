Problem Statement - 
Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Example - 
Input: root = [1,2,2,3,4,4,3]
Output: true

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool solve(TreeNode* r1, TreeNode* r2){
        if(!r1 && !r2) return true;
        else if(!r1 || !r2) return false;
        if((r1->val!=r2->val))return false;
        int lr1 = -200, lr2 = -200, rr1 = -200, rr2 = -200;
        if(r1->left) lr1 = r1->left->val;
        if(r2->left) lr2 = r2->left->val;
        if(r1->right) rr1 = r1->right->val;
        if(r2->right) rr2 = r2->right->val;
        if(lr1!=rr2 || rr1!=lr2) return false;
        return solve(r1->left, r2->right) && solve(r1->right, r2->left);
    }
    bool isSymmetric(TreeNode* root) {
        return solve(root->left, root->right);
    }
};
