Problem Statement - 
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit.
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example - 
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* t1=l1, *t2=l2, *pt1=NULL;
        int s=0, c=0;
        while(t1 && t2) s=(t1->val+t2->val+c)%10, c=(t1->val+t2->val+c)/10, t1->val=s, pt1=t1, t1=t1->next, t2=t2->next;
        if(t2) pt1->next=t2;
        while(t2 && c>0) s=(c+t2->val)%10, c=(c+t2->val)/10, t2->val=s, pt1=t2, t2=t2->next;
        while(t1 && c>0) s=(c+t1->val)%10, c=(c+t1->val)/10, t1->val=s, pt1=t1, t1=t1->next;
        if(c>0) pt1->next=new ListNode(c);
        return l1;
    }
};
