 Problem Statement - 
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit.
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example - 
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
-------------------------------------------------------------------------------------------------------------------------
Solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* t1 = l1;
        ListNode* t2 = l2;
        ListNode* res = new ListNode(0);
        ListNode* tres = res;
        int a, v, carry=0, i = 0;
        while(t1 || t2){
            if(t1 && t2)
            a = t1->val + t2->val + carry;
            else if(!t2) a = t1->val + carry;
            else a = t2->val + carry;
            v = a%10;
            if(i==0)    tres->val = v;
            else tres->next = new ListNode(v);
            carry = a/10;
            if(t1)
                t1 = t1->next;
            if(t2)
                t2 = t2->next;
            if(i!=0)
                tres = tres->next;
            i = 1;
        }
        if(carry>0) tres->next = new ListNode(carry);
        return res;
    }
};


