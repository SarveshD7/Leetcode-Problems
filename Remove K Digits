Problem Statement - 
Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example - 
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    string removeKdigits(string num, int k) {
        stack<char>x;
        int i=0;
        while(i<num.size() && num[i]==num[0]) i++;
        if(i==num.size()) {
            num=num.substr(0, num.size()-k);
            return num!=""?num:"0";
        } 
        for(auto i:num){
            if(x.empty() || i>=x.top()) x.push(i);
            else{
                while(!x.empty() && x.top()>i && k>0)  x.pop(), k--;
                x.push(i);
            }
        }
        num="";
        while(k>0 && !x.empty()) x.pop(), k--;
        while(!x.empty()) num+=x.top(), x.pop();
        i=0;
        reverse(num.begin(), num.end());
        while(i<num.size() && num[i]=='0') i++;
        num=num.substr(i, num.size()-i);
        return num!=""?num:"0";
    }
};
