Problem Statement - 
Given the root of a binary search tree and an integer k, return true if there exist 
two elements in the BST such that their sum is equal to k, or false otherwise.

Example - 
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, unordered_map<int, int>&m){
        if(!root) return ;
        m[root->val]++;
        solve(root->left, m);
        solve(root->right, m);
        return ;
    }
    bool findTarget(TreeNode* root, int k) {
        unordered_map<int, int>m;
        solve(root, m);
        for(auto i:m){
            if(i.first!=k/2)
            if(m.find(k-i.first)!=m.end())
                return true;
        }
        return false;
    }
};
