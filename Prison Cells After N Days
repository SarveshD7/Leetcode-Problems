Problem Statement - 
There are 8 prison cells in a row and each cell is either occupied or vacant.
Each day, whether the cell is occupied or vacant changes according to the following rules:
If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
Otherwise, it becomes vacant.
Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.
You are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.
Return the state of the prison after n days (i.e., n such changes described above).

Example - 
Input: cells = [0,1,0,1,1,0,0,1], n = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    vector<int> prisonAfterNDays(vector<int>& cells, int n) {
        map<vector<int>, int>m;
        int i=0, rem=-1;
        vector<int>v(8, 0);
        while(i<n){
            for(int j=0;j<8;j++){
                if(j+1<8 && j-1>=0 && cells[j+1]==cells[j-1]) v[j]=1;
                else v[j]=0;
            }
            for(int j=0;j<8;j++) cells[j]=v[j], v[j]=0;
            if(m.find(cells)!=m.end()){ 
                rem=(n-i-1)%(i-m[cells]);
                break;
            }else m[cells]=i;
            i++;
        }
        i=0;
        while(i<rem){
            for(int j=0;j<8;j++){
                if(j+1<8 && j-1>=0 && cells[j+1]==cells[j-1]) v[j]=1;
                else v[j]=0;
            }
            for(int j=0;j<8;j++) cells[j]=v[j], v[j]=0;
            i++;
        }
        return cells;
    }
};
