Problem Statement - 
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

Example - 
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. 
In this case, the max area of water (blue section) the container can contain is 49.

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int maxArea(vector<int>& height) {
        int ans = INT_MIN, n = height.size();
        int i = 0, j = height.size() - 1;
        while(i<=j){
            int h1 = height[i];
            int h2 = height[j];
            // cout<<h1<<" "<<h2<<" "<<j-i<<endl;
            // cout<<"Before - "<<i<<" " <<j<<endl;
            ans = max(ans,min(h1, h2)*(j-i));
            if(h1<h2) i++;
            else if(h2<h1) j--;
            else{
                if( i+1<n && j-1 >=0 && height[i+1]>height[j-1]) i++;
                else j--;
            }
            // cout<<"After - "<<i<<" " <<j<<endl;
        }
        return ans;
    }
};
