Problem Link - 
Given a collection of candidate numbers (candidates) and a target number (target),
find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example - 
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 

******************************OPTIMIZATION - first normal PICK then for NOT PICK go to the next unique element************************************************

class Solution {
public:
    void solve(int i, vector<int>&nums, vector<int>&v, int& t, int&s, vector<vector<int>>&ans){
        if(i>=nums.size()){
            if(s==t) ans.push_back(v);
            return ;
        }
        if(s+nums[i]<=t) v.push_back(nums[i]),s+=nums[i], solve(i+1, nums, v, t, s, ans), v.pop_back(), s-=nums[i];
        int j=i;
        while(j<nums.size() && nums[j]==nums[i]) j++;
        solve(j, nums, v, t, s, ans);
        return ;
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>v;
        cout<<candidates.size()<<endl;
        sort(candidates.begin(), candidates.end());
        int s=0;
        solve(0, candidates, v, target, s, ans);
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        
        return ans;      
    }
};
