Problem Statement - 
Given two strings s and t, determine if they are isomorphic.
Two strings s and t are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

Example - 
Input: s = "egg", t = "add"
Output: true

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.size()!=t.size()) return false;
        unordered_map<char, char>v1, v2;
        int i=0;
        while(i<s.size()){
            if(v1.find(s[i])==v1.end() && v2.find(t[i])==v2.end()) v1[s[i]]=t[i], v2[t[i]]=s[i];
            else if((v1.find(s[i])!=v1.end() && v1[s[i]]!=t[i]) ||  (v2.find(t[i])!=v2.end() && v2[t[i]]!=s[i])) return false;
            i++;
        }
        return true;
    }
};
