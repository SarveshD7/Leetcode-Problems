Problem Statement - 
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.
 
Example - 
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

-------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
bool isSafe(int row, int col, vector<string>board, int n){
    int nrow = row, ncol = col;
    while(nrow>=0 && ncol>=0){
        if(board[nrow][ncol]=='Q') return false;
        nrow--, ncol--;
    }
    nrow = row, ncol = col;
    while(ncol>=0){
        if(board[nrow][ncol]=='Q') return false;
        ncol--;
    }
    nrow = row, ncol = col;
    while(nrow<n && ncol>=0){
        if(board[nrow][ncol]=='Q') return false;
        nrow++, ncol--;
    }
    return true;
}
void solve(int n, int col, vector<string>& board, vector<vector<string>>&ans, vector<int>& leftRow, vector<int>& lowerDiagonal, vector<int>& upperDiagonal){
    if(col==n)
    {
        ans.push_back(board);
        return ;
    }
    for(int row = 0;row<n;row++){
        if(leftRow[row]==0 && lowerDiagonal[row+col]==0 && upperDiagonal[n-1+col-row]==0){
            board[row][col] = 'Q';
            leftRow[row] = 1;
            lowerDiagonal[row+col] = 1;
            upperDiagonal[n-1+col-row]=1;
            solve(n, col+1, board, ans, leftRow, lowerDiagonal, upperDiagonal);
            leftRow[row] = 0;
            lowerDiagonal[row+col] = 0;
            upperDiagonal[n-1+col-row] = 0;
            board[row][col] = '.';
        }
    }
}
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string> board(n);
        vector<int>leftRow(n, 0);
        vector<int>lowerDiagonal(2*n-1, 0);
        vector<int>upperDiagonal(2*n-1, 0);
        string s(n,'.');
        for(int i = 0;i<n;i++){
            board[i] = s;
        }
        solve(n, 0, board, ans, leftRow, lowerDiagonal, upperDiagonal);
        return ans;
    }
};
