Problem Statement - 
You are given an integer array nums and an integer k.
In one operation, you can pick two numbers from the array whose sum equals k
and remove them from the array.
Return the maximum number of operations you can perform on the array.

Example - 
Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.

-----------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int maxOperations(vector<int>& nums, int k) {
        unordered_map<int,int>m;
        for(auto i:nums) m[i]++;
        int ans = 0;
        for(auto i:nums){
            if(m[i]>0 && m.find(k-i)!=m.end()){
                if((i!=k-i) || (i==k-i && m[i]>=2)){
                if(i==k-i){
                    if(m[i]%2!=0) m[i] = (m[i]-1)/2;
                    else m[i]/=2;
                }
                int add = 0;
                add = min(m[i], m[k-i]);
                ans+=add;
                m[i]-=add;
                if(m[i]==0) m.erase(i);
                m[k-i]-=add;
                if(m[k-i]==0) m.erase(k -i);
                }
            }
        }
        return ans;
    }
};
