Problem Statement - 
Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. 
Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.
  
Example - 
Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
Solution - 
  
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool bfs(int i, int v, vector<int>adj[], vector<int>&vis){
        queue<int>q;
        q.push(i);
        vis[i] = 1;
        int cnt;
        while(!q.empty()){
            int a = q.front();
            cnt = 0;
            for(auto j:adj[a]){
                if(vis[j]==0) vis[j] = 1, q.push(j);
                else cnt++;
            }
            if(cnt==adj[a].size() && cnt>1) return true;
            q.pop();
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        
        vector<int>vis(V,0);
        for(int i = 0;i<V;i++){
            if(vis[i]==0)
                if(bfs(i,V, adj, vis)) return true;
        }
        return false;
    }
};  
