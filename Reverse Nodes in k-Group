Problem Statement - 
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example - 
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    ListNode* solve(ListNode* h, int k){
        ListNode* c=h, *p=NULL, *n=NULL;
        while(c && k>0) n=c->next, c->next=p, p=c, c=n, k--;
        return p;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {      
        ListNode* t=head, *n=NULL, *th=NULL, *nh=NULL, *p=NULL, *st=NULL;
        int i=0, s=0;
        while(t) s++, t=t->next;
        s/=k, t=head;
        while(t){
            st=t;
            i=0;
            if(s<=0) p->next=t;
            while(t && i<k) i++, t=t->next;
            if(s>0){
                nh = solve(st, k);
                if(st==head) head=nh;
                if(p)p->next=nh;
                p=st;
                s--;
            }
        }
        return head;

    }
};
