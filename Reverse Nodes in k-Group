Problem Statement - 
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example - 
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    ListNode* reverse(ListNode* &head){
        ListNode* curr=head, *prev=NULL, *nxt=NULL, *t=head;
        while(curr) nxt=curr->next, curr->next=prev, prev=curr, curr=nxt;
        head=prev;
        return t;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(!head || !head->next) return head;
        ListNode* t=head, *ans=NULL, *tl=NULL, *n=t->next, *h=head, *ttl=NULL;
        int i=0;
        while(t){
            i++;
            n=t->next;
            if(i%k==0){
                if(t->next) t->next=NULL;
                if(!ans && !tl){ 
                    tl=reverse(h);
                    ans=h;
                }else{
                    ttl=reverse(h);
                    tl->next=h, tl=ttl;
                }
                h=n;
            }
            t=n;
        }
        if(h) tl->next=h;
        return ans;
    }
};
