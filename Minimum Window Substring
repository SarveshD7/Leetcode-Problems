Problem Statement - 
Given two strings s and t of lengths m and n respectively, return the minimum window 
substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.

Example - 
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    string minWindow(string s, string t) {
        if(t.size()>s.size()) return "";
        vector<int>v1(58, 0), v2(58, 0);
        int st=0, en=0, id=0, ans=INT_MAX, a=0, b=0, tm;
        for(auto i:t){ 
            if(v1[i-'A']==0) a++;
            v1[i-'A']++;
        }
        while(en<s.size()){          
            v2[s[en]-'A']++;            
            if(v2[s[en]-'A']==v1[s[en]-'A']) b++;
            if(a==b){
                tm=st;
                while(a==b && st<en && v2[s[st]-'A']>v1[s[st]-'A']){ 
                    v2[s[st]-'A']--;
                    if(v2[s[st]-'A']==0 && v1[s[st]-'A']>0) b--;
                    st++;
                }  
                if(b<a && ans>en-st+2) ans=en-st+2, id=st-1;
                else if(ans>en-st+1) ans=en-st+1, id=st;                
            }            
            en++;
        }
        ans=ans!=INT_MAX?ans:0;
        return s.substr(id, ans);
    }
};
