Problem Statement - 
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example - 
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int>ans;
        int s1=0, s2=0;
        while(s1<nums.size() && nums[s1]<0)s1++, s2++;
        s1-=1;            
        while(s1>=0 && s2<nums.size()){
            if(abs(nums[s1])>nums[s2]){
                ans.push_back(nums[s2]*nums[s2]), s2+=1;
            }else ans.push_back(nums[s1]*nums[s1]), s1-=1;
        }
        while(s1>=0) ans.push_back(nums[s1]*nums[s1]), s1-=1;
        while(s2<nums.size()) ans.push_back(nums[s2]*nums[s2]), s2+=1;
        return ans;
    }
};
