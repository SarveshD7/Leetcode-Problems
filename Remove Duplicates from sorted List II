Problem Statement - 
Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Return the linked list sorted as well.

Example - 
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* n=NULL, *t=head, *nxt=NULL, *p=NULL;
        bool chk=false;
        while(t){
            nxt=t->next, chk=false;
            while(nxt and nxt->val==t->val){
                n=nxt->next;
                nxt->next=NULL;
                nxt=n;
                chk=true;
            }
            if(chk){
                t->next=NULL;
                if(p){
                    p->next=nxt;
                }else{
                    head=nxt;
                }
            }else{
                p=t;
                t->next=nxt;
            }
            t=nxt;
        }   
        return head;
    }
};
