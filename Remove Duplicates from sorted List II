Problem Statement - 
Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Return the linked list sorted as well.

Example - 
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

-----------------------------------------------------------------------------------------------------------------------------------------

Solution - 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        map<int,int>m;
        ListNode* temp = head;
        while(temp){
            m[temp->val]++;
            temp = temp->next;
        }
        ListNode* res = NULL;
        temp =NULL;
        for(auto i:m){
            if(i.second==1){
                if(res==NULL){
                    res = new ListNode(i.first);
                    temp = res;
                }
                else{   
                    temp->next =new ListNode(i.first);
                    temp = temp->next;
                }
            }
        }
        return res;
    }
};
