Problem Statement - 
You are given a 0-indexed array of strings words and a 2D array of integers queries.
Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.
Return an array ans of size queries.length, where ans[i] is the answer to the ith query.
Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.

Example - 
Input: words = ["aba","bcb","ece","aa","e"], queries = [[0,2],[1,4],[1,1]]
Output: [2,3,0]
Explanation: The strings starting and ending with a vowel are "aba", "ece", "aa" and "e".
The answer to the query [0,2] is 2 (strings "aba" and "ece").
to query [1,4] is 3 (strings "ece", "aa", "e").
to query [1,1] is 0.
We return [2,3,0].

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    bool isVowel(char &x){return x=='a' || x=='e' || x=='i' || x=='o' || x=='u';}
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        unordered_map<int, int>m;
        vector<int>ans;
        int k=0, cnt=0;
        for(auto i:words){
            if(isVowel(i[0]) && isVowel(i[i.size()-1])) cnt++, m[k]=cnt;
            else m[k]=cnt;
            k++;
        }
        for(auto i:queries){
            ans.push_back(m[i[1]]-m[i[0]-1]);
        }
        return ans;
    }
};
