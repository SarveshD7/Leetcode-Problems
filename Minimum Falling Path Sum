Problem Statement - 
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

Example - 
Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        vector<int>r1(matrix.size(),INT_MAX), r2(matrix.size(), INT_MAX);
        for(int i=0;i<r2.size();i++) r2[i]=matrix[0][i];
        for(int i=1;i<matrix.size();i++){
            for(int j=0;j<matrix[i].size();j++){
                if(j==0) r1[j] = matrix[i][j]+min(r2[j], r2[j+1]);
                else if(j==matrix.size()-1) r1[j] = matrix[i][j]+min(r2[j], r2[j-1]);
                else r1[j]=matrix[i][j]+min(min(r2[j], r2[j-1]), r2[j+1]);
            }
            for(int j=0;j<r1.size();j++) r2[j]=r1[j];
        }
        int ans=INT_MAX;
        for(auto i:r2) ans=min(ans, i);
        return ans;
    }
};
