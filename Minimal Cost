Problem Statement - 
There is an array arr of heights of stone and Geek is standing at the first stone and can jump to one of the following: Stone i+1, i+2, ... i+k stone, where k is the 
maximum number of steps that can be jumped and cost will be |hi-hj| is incurred, where j is the stone to land on. Find the minimum possible total cost 
incurred before the Geek reaches the last stone.

Example - 
Input: k = 3, arr[]= [10, 30, 40, 50, 20]
Output: 30
Explanation: Geek will follow the path 1->2->5, the total cost would be | 10-30| + |30-20| = 30, which is minimum

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
  public:
    int solve(int i, int &k, vector<int>&arr, vector<int>&dp){
        if(i>=arr.size()-1) return 0;
        if(dp[i]!=-1) return dp[i];
        int mn=INT_MAX;
        for(int j=1;j<=k;j++) if(i+j<arr.size()) mn=min(mn, abs(arr[i]-arr[i+j])+solve(i+j, k, arr, dp));
        return dp[i]=mn;
    }
    int minimizeCost(int k, vector<int>& arr) {
        vector<int>dp(arr.size(), -1);
        // MEMOIZATION
        // return solve(0, k, arr, dp);        
        // TABULATION
        int mn;
        dp[arr.size()-1]=0;
        for(int i=arr.size()-2;i>=0;i--){
            mn=INT_MAX;
            for(int j=1;j<=k;j++) if(i+j<arr.size()) mn=min(mn, abs(arr[i]-arr[i+j])+dp[i+j]);
            dp[i]=mn;
        }
        return dp[0];
    }
};
