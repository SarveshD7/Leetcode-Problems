Problem Statement - 
You are given an m x n grid where each cell can have one of three values:
0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.
Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Example - 
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

----------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
       queue<pair<pair<int, int>, int>>q;
       int m = grid.size(), n = grid[0].size();
       for(int i = 0;i<m;i++){
           for(int j = 0;j<n;j++){
               if(grid[i][j]==2) q.push({{i,j},0});
           }
       } 
       int a[4] = {-1,0,1,0};
       int b[4] = {0,1,0,-1};
       int ans = 0;
       while(!q.empty()){
           
           int s = q.size();
           for(int i = 0;i<s;i++){
                int x = q.front().first.first;
                int y = q.front().first.second;
                int t = q.front().second;
               for(int j = 0;j<4;j++){
                   int xnew = x + a[j];
                   int ynew = y + b[j];
                   if(xnew>=0 && xnew<m && ynew>=0 && ynew<n && grid[xnew][ynew]==1) {
                        q.push({{xnew, ynew},t+1});
                        grid[xnew][ynew] = -1;
                   }
               }
               q.pop();
               ans = max(t,ans);
           }

       }
       for(int i =0;i<m;i++){
           for(int j = 0;j<n;j++){
               if(grid[i][j]==1){
                   ans = -1;
                   break;
               }
           }
       }
       return ans;
    }
};
