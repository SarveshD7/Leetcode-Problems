Problem Statement - 
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

Example - 
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        vector<int>row(grid[0].size(),0);
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                if(i==0 && j==0) row[j]=grid[i][j]; 
                else if(i==0) row[j]=grid[i][j]+row[j-1]; 
                else if(j==0) row[j]=grid[i][j]+row[0];
                else row[j]=min(row[j], row[j-1])+grid[i][j]; 
            }
        }
        return row[grid[0].size()-1];
    }
};
