Problem Statement - 
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is 
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3
and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example - 
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0, r=nums.size()-1, pivot=-1, m;
        while(l<=r){
            m=(r-l)/2+l;
            // cout<<nums[l]<<" "<<nums[m]<<" "<<nums[r]<<endl;
            if(nums[m]==target) return m;
            if(nums[m]>=nums[l] && nums[m]<=nums[r]){
                // SORTED NO ROTATION
                if(nums[m]==target) return m;
                else if(nums[m]<target) l=m+1;
                else r=m-1;
            }else if(nums[m]<=nums[l] && nums[m]<=nums[r]){
                // RIGHT Part Sorted
                if(target>nums[m] && target<=nums[r]) l=m+1;
                else r=m-1;
            }else if(nums[m]>=nums[l] && nums[m]>=nums[r]){
                // LEFT part sorted
                if(target>=nums[l] && target<nums[m]) r=m-1;
                else l=m+1;
            }
        }
        return -1;
    }
};
