Problem Statement - 
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is 
[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3
and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example - 
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Solution - 
class Solution {
public:
    int binarySearch(vector<int>& nums, int start, int end, int target){
        if(end<start) return -1;
        if(end==start){
            if(nums[start]==target) return start;
            else return -1;
        }
        int mid = (end-start)/2 + start;
        if(nums[mid]==target) return mid;
        else if(nums[mid]>target) return binarySearch(nums, start, mid-1, target);
        else return binarySearch(nums, mid+1, end, target);
    }
    int search(vector<int>& nums, int target) {
        int i = 0, id = -1;
        while(i<nums.size()-1){
            if(nums[i+1]<nums[i]){
                id = i;
                break;
            }
            i++;
        }
        cout<<id<<endl;
        if(id==-1) return binarySearch(nums, 0, nums.size()-1, target);
        else {
            int pos = 0;
            pos = binarySearch(nums, 0, id, target);
            if(pos!=-1) return pos;
            pos = binarySearch(nums, id+1, nums.size()-1, target);
            return pos;
        }
    }
};
